import{_ as n,c as a,a2 as e,o as l}from"./chunks/framework.w7Qyxd7T.js";const p="/assets/dashboard_tags.DtOwOdZi.png",m=JSON.parse('{"title":"油猴中文文档","description":"油猴官方中文开发文档，油猴官方中文开发手册，API详解","frontmatter":{"title":"油猴中文文档","description":"油猴官方中文开发文档，油猴官方中文开发手册，API详解"},"headers":[],"relativePath":"computer/tampermonkey/chinese-doc.md","filePath":"computer/tampermonkey/chinese-doc.md","lastUpdated":null}'),i={name:"computer/tampermonkey/chinese-doc.md"};function o(c,s,t,r,d,u){return l(),a("div",null,s[0]||(s[0]=[e(`<p><a href="https://www.tampermonkey.net/documentation.php?ext=dhdg&amp;updated=true&amp;version=5.3.2" target="_blank" rel="noreferrer">官方英文文档地址</a></p><h2 id="用户脚本标题" tabindex="-1">用户脚本标题 <a class="header-anchor" href="#用户脚本标题" aria-label="Permalink to &quot;用户脚本标题&quot;">​</a></h2><h3 id="name" tabindex="-1">@name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;@name&quot;">​</a></h3><p>脚本的名称。</p><p>国际化是通过添加一个命名地区（locale）的附录来实现的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @name    A test</span></span>
<span class="line"><span>// @name:de Ein Test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="namespace" tabindex="-1">@namespace <a class="header-anchor" href="#namespace" aria-label="Permalink to &quot;@namespace&quot;">​</a></h3><p>脚本的命名空间。</p><h3 id="copyright" tabindex="-1">@copyright <a class="header-anchor" href="#copyright" aria-label="Permalink to &quot;@copyright&quot;">​</a></h3><p>在脚本编辑器头部的脚本名称正下方显示的版权声明。</p><h3 id="version" tabindex="-1">@version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;@version&quot;">​</a></h3><p>脚本版本。这用于更新检查，并且每次更新时都需要增加。</p><p>在此列表中，下一个条目被视为更高的版本号，例如：Alpha-v1 &lt; Alpha-v2，以及 16.4 等于 16.04。</p><ul><li>Alpha-v1</li><li>Alpha-v2</li><li>Alpha-v10</li><li>Beta</li><li>0.5pre3</li><li>0.5prelimiary</li><li>0.6pre4</li><li>0.6pre5</li><li>0.7pre4</li><li>0.7pre10</li><li>1.-1</li><li>1 == 1. == 1.0 == 1.0.0</li><li>1.1a</li><li>1.1aa</li><li>1.1ab</li><li>1.1b</li><li>1.1c</li><li>1.1.-1</li><li>1.1 == 1.1.0 == 1.1.00</li><li>1.1.1.1.1</li><li>1.1.1.1.2</li><li>1.1.1.1</li><li>1.10.0-alpha</li><li>1.10 == 1.10.0</li><li>1.11.0-0.3.7</li><li>1.11.0-alpha</li><li>1.11.0-alpha.1</li><li>1.11.0-alpha+1</li><li>1.12+1 == 1.12+1.0</li><li>1.12+1.1 == 1.12+1.1.0</li><li>1.12+2</li><li>1.12+2.1</li><li>1.12+3</li><li>1.12+4</li><li>1.12</li><li>2.0</li><li>16.4 == 16.04</li><li>2023-08-17.alpha</li><li>2023-08-17</li><li>2023-08-17_14-04 == 2023-08-17_14-04.0</li><li>2023-08-17+alpha</li><li>2023-09-11_14-0</li></ul><h3 id="description" tabindex="-1">@description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;@description&quot;">​</a></h3><p>一个简短而重要的描述。</p><p>国际化是通过添加一个命名地区的附录来实现的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @description    This userscript does wonderful things</span></span>
<span class="line"><span>// @description:de Dieses Userscript tut wundervolle Dinge</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="icon-iconurl-defaulticon" tabindex="-1">@icon, @iconURL, @defaulticon <a class="header-anchor" href="#icon-iconurl-defaulticon" aria-label="Permalink to &quot;@icon, @iconURL, @defaulticon&quot;">​</a></h3><p>低分辨率下的脚本图标。</p><h3 id="icon64-icon64url" tabindex="-1">@icon64, @icon64URL <a class="header-anchor" href="#icon64-icon64url" aria-label="Permalink to &quot;@icon64, @icon64URL&quot;">​</a></h3><p>这个脚本的图标为 64x64 像素。如果提供了这个标签（@icon64），但同时也提供了@icon 标签，那么在选项页面的某些位置，@icon 图像将会被缩放。</p><h3 id="grant" tabindex="-1">@grant <a class="header-anchor" href="#grant" aria-label="Permalink to &quot;@grant&quot;">​</a></h3><p>@grant 用于将 GM__ 和 GM._ 函数、unsafeWindow 对象以及一些强大的 window 函数列入白名单。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @grant GM_setValue</span></span>
<span class="line"><span>// @grant GM_getValue</span></span>
<span class="line"><span>// @grant GM.setValue</span></span>
<span class="line"><span>// @grant GM.getValue</span></span>
<span class="line"><span>// @grant GM_setClipboard</span></span>
<span class="line"><span>// @grant unsafeWindow</span></span>
<span class="line"><span>// @grant window.close</span></span>
<span class="line"><span>// @grant window.focus</span></span>
<span class="line"><span>// @grant window.onurlchange</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>由于关闭和聚焦标签页是一个强大的功能，这也需要添加到 @grant 语句中。如果 @grant 后面没有跟随任何内容，那么沙盒模式将被禁用。在这种模式下，将无法使用任何 GM_* 函数，但 GM_info 属性仍然可用。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @grant none</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果没有给出 @grant 标签，则默认使用空列表。但这与使用 none 是不同的。</p><h3 id="author" tabindex="-1">@author <a class="header-anchor" href="#author" aria-label="Permalink to &quot;@author&quot;">​</a></h3><p>脚本的作者。</p><h3 id="homepage-homepageurl-website-source" tabindex="-1">@homepage, @homepageURL, @website, @source <a class="header-anchor" href="#homepage-homepageurl-website-source" aria-label="Permalink to &quot;@homepage, @homepageURL, @website, @source&quot;">​</a></h3><p>脚本作者的主页，该主页将在选项页面上使用，用于从脚本名称链接到给定的页面。请注意，如果 @namespace 标签以 http:// 开头，那么它的内容也将用于此链接</p><h3 id="antifeature" tabindex="-1">@antifeature <a class="header-anchor" href="#antifeature" aria-label="Permalink to &quot;@antifeature&quot;">​</a></h3><p>此标签允许脚本开发者披露他们是否通过其脚本盈利。例如，GreasyFork 就要求提供此信息。</p><p>语法：&lt;标签&gt; &lt;类型&gt; &lt;描述&gt;</p><p>&lt;类型&gt; 可以有以下值：</p><ul><li>ads（广告）</li><li>tracking（追踪）</li><li>miner（挖矿）</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @antifeature       ads         We show you ads</span></span>
<span class="line"><span>// @antifeature:fr    ads         Nous vous montrons des publicités</span></span>
<span class="line"><span>// @antifeature       tracking    We have some sort of analytics included</span></span>
<span class="line"><span>// @antifeature       miner       We use your computer&#39;s resources to mine a crypto currency</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>国际化是通过添加一个命名区域的附录来实现的</p><h3 id="require" tabindex="-1">@require <a class="header-anchor" href="#require" aria-label="Permalink to &quot;@require&quot;">​</a></h3><p>指向一个 JavaScript 文件，该文件将在脚本本身开始运行之前被加载并执行。注意：通过@require 加载的脚本及其‘use strict’声明可能会影响用户脚本的严格模式！</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @require https://code.jquery.com/jquery-2.1.4.min.js</span></span>
<span class="line"><span>// @require https://code.jquery.com/jquery-2.1.3.min.js#sha256=23456...</span></span>
<span class="line"><span>// @require https://code.jquery.com/jquery-2.1.2.min.js#md5=34567...,sha256=6789...</span></span>
<span class="line"><span>// @require tampermonkey://vendor/jquery.js</span></span>
<span class="line"><span>// @require tampermonkey://vendor/jszip/jszip.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>请查阅子资源完整性（Sub-resource Integrity，SRI）部分以获取更多关于如何确保完整性的信息。</p><p>允许使用多个标签实例</p><h3 id="resource" tabindex="-1">@resource <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;@resource&quot;">​</a></h3><p>预加载可通过 GM_getResourceURL 和 GM_getResourceText 由脚本访问的资源。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @resource icon1       http://www.tampermonkey.net/favicon.ico</span></span>
<span class="line"><span>// @resource icon2       /images/icon.png</span></span>
<span class="line"><span>// @resource html        http://www.tampermonkey.net/index.html</span></span>
<span class="line"><span>// @resource xml         http://www.tampermonkey.net/crx/tampermonkey.xml</span></span>
<span class="line"><span>// @resource SRIsecured1 http://www.tampermonkey.net/favicon.ico#md5=123434...</span></span>
<span class="line"><span>// @resource SRIsecured2 http://www.tampermonkey.net/favicon.ico#md5=123434...;sha256=234234...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>请查阅‘子资源完整性（Sub-resource Integrity，简称 SRI）’部分，以获取更多关于如何确保资源完整性的信息。</p><p>允许使用多个标签实例。</p><h3 id="include" tabindex="-1">@include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;@include&quot;">​</a></h3><p>脚本应该运行的页面。允许使用多个标签实例。@include 不支持 URL 的哈希参数。你必须匹配不包含哈希参数的路径，并使用 windowon.urlchange。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @include http://www.tampermonkey.net/*</span></span>
<span class="line"><span>// @include http://*</span></span>
<span class="line"><span>// @include https://*</span></span>
<span class="line"><span>// @include /^https:\\/\\/www\\.tampermonkey\\.net\\/.*$/</span></span>
<span class="line"><span>// @include *</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意：当编写类似 *://tmnk.net/* 的模式时，许多脚本开发者可能期望脚本仅在 tmnk.net 上运行，但事实并非如此。它同样会在类似 <a href="https://example.com/?http://tmnk.net/" target="_blank" rel="noreferrer">https://example.com/?http://tmnk.net/</a> 的 URL 上运行。</p><p>因此，Tampermonkey 对包含 :// 的 @include 指令进行了解释，其方式与 @match 指令有些相似。在 :// 之前的每个 _ 仅匹配除 : 字符之外的所有内容，以确保仅匹配 URL 方案（即协议部分，如 http、https 等）。此外，如果这样的 @include 指令在 :// 之后包含 /，则这两个字符串之间的所有内容都被视为主机名，匹配除 / 字符之外的所有内容。同样，:// 之后紧跟的 _ 也遵循这一规则。</p><h3 id="match" tabindex="-1">@match <a class="header-anchor" href="#match" aria-label="Permalink to &quot;@match&quot;">​</a></h3><p>在 Tampermonkey 中，@match 指令用于指定你的脚本应该运行在哪些网页上。@match 的值应该是一个与你希望脚本运行的页面相匹配的 URL 模式。以下是你需要设置的 URL 模式的各个部分：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @match &lt;protocol&gt;://&lt;domain&gt;&lt;path&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><strong>协议（Protocol）</strong>：这是 URL 的第一部分，位于冒号之前。它指定了页面使用的协议，如 http 或 https。<code>*</code>可以匹配这两种协议。</p></li><li><p><strong>域名（Domain）</strong>：这是 URL 的第二部分，位于协议和两个斜杠之后。它指定了网站的域名，如 tmnk.com。你可以使用通配符<code>*</code>来匹配特定域名及其任何子域。例如，<code>*.tmnk.net</code>将匹配<code>tmnk.net</code>以及任何其子域，如<code>www.tmnk.net</code>。</p></li><li><p><strong>路径（Path）</strong>：这是 URL 中位于域名之后的部分，可能包括额外的子目录或文件名。你可以使用通配符<code>*</code>来匹配路径的任何部分。</p></li></ul><p><strong>更多信息</strong>：请查阅相关文档以获取关于匹配模式的更多信息。请注意，<code>&lt;all_urls&gt;</code>声明目前尚不支持，并且协议部分也接受<code>http*://</code>这样的形式（即可以匹配以<code>http</code>开头的任何协议，包括<code>https</code>，但通常建议明确指定<code>https</code>以确保安全性，除非确实需要匹配非安全协议）。</p><p><strong>多个标签实例</strong>：在 Tampermonkey 脚本中，允许使用多个<code>@match</code>标签实例来指定多个匹配模式。这样，你的脚本就可以根据需要在多个不同的网页上运行。</p><p><strong>总结</strong>：在编写 Tampermonkey 脚本时，使用<code>@match</code>指令可以精确地指定你的脚本应该在哪些网页上运行。通过合理地设置协议、域名和路径部分，你可以确保你的脚本只在正确的页面上执行，从而避免不必要的资源消耗和潜在的性能问题。同时，请注意遵循最佳实践，确保你的脚本在安全的上下文中运行，并尊重用户的隐私和权限。</p><p>更多例子:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @match *://*/*</span></span>
<span class="line"><span>// @match https://*/*</span></span>
<span class="line"><span>// @match http://*/foo*</span></span>
<span class="line"><span>// @match https://*.tampermonkey.net/foo*bar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="exclude" tabindex="-1">@exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;@exclude&quot;">​</a></h3><p>即使某些 URL 被@include 或@match 指令所包含，也排除它们。 允许使用多个标签实例。</p><h3 id="run-at" tabindex="-1">@run-at <a class="header-anchor" href="#run-at" aria-label="Permalink to &quot;@run-at&quot;">​</a></h3><p><code>@run-at</code>定义了脚本注入的时刻。与其他脚本处理程序不同，<code>@run-at</code>确定了脚本希望运行的最早可能时刻。这意味着，使用<code>@require</code>标签的脚本可能会因为引入脚本耗时较长而在文档加载完成后才执行。</p><p>不过，在给定注入时刻之后触发的所有<code>DOMNodeInserted</code>和<code>DOMContentLoaded</code>事件都会被缓存，并传递给通过沙盒的<code>window.addEventListener</code>方法注册的监听器。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @run-at document-start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>脚本将尽快被注入</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @run-at document-body</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果存在 body 元素，则脚本将被注入。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @run-at document-end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>脚本将在 DOMContentLoaded 事件被分发时或之后被注入。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @run-at document-idle</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>脚本将在 DOMContentLoaded 事件分发后被注入。如果没有给出@run-at 标签，则这是默认值。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @run-at context-menu</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果在浏览器上下文菜单中点击了该脚本，那么它将被注入。</p><p>注意：如果使用此值，那么所有的@include 和@exclude 声明都将被忽略，但未来这可能会发生变化。</p><h3 id="run-in-v5-3" tabindex="-1">@run-in <sup>v5.3+</sup> <a class="header-anchor" href="#run-in-v5-3" aria-label="Permalink to &quot;@run-in &lt;sup&gt;v5.3+&lt;/sup&gt;&quot;">​</a></h3><p>定义脚本被注入的浏览器上下文类型。此元键（meta key）允许您控制脚本是在普通浏览标签页、无痕/隐私标签页中运行，还是两者都运行。这提供了基于浏览会话的隐私上下文来确定脚本行为的灵活性。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @run-in normal-tabs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>脚本将仅在正常浏览标签页（非无痕模式，默认容器）中被注入。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @run-in incognito-tabs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>脚本将仅在无痕浏览标签页（隐私模式）中被注入。在 Firefox 中，这意味着所有不使用默认 cookie 存储的标签页。</p><p>Firefox 支持容器功能，它允许您将浏览活动分隔到不同的上下文中。您可以在@run-in 标签中指定容器 ID，以基于容器上下文来控制脚本的行为。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @run-in container-id-2</span></span>
<span class="line"><span>// @run-in container-id-3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>脚本将仅在被指定容器的标签页中被注入。当脚本在期望的容器上下文中运行时，可以通过检查 GM_info.container 来获取容器 ID。</p><p>如果没有指定@run-in 标签，则脚本默认在所有标签页中被注入。</p><h3 id="sandbox-4-18" tabindex="-1">@sandbox <sup>4.18+</sup> <a class="header-anchor" href="#sandbox-4-18" aria-label="Permalink to &quot;@sandbox &lt;sup&gt;4.18+&lt;/sup&gt;&quot;">​</a></h3><p><code>@sandbox</code>标签允许 Tampermonkey 决定用户脚本被注入的位置：</p><ul><li><strong>MAIN_WORLD</strong> - 页面上下文，即直接在网页的上下文中运行脚本。</li><li><strong>ISOLATED_WORLD</strong> - 扩展的内容脚本上下文，即在浏览器扩展的隔离环境中运行脚本。</li><li><strong>USERSCRIPT_WORLD</strong> - 为用户脚本创建的特殊上下文，这是一个专为用户脚本设计的隔离环境。</li></ul><p>但是，用户脚本不必直接指定一个环境，而是可以表明它具体需要访问什么。<code>@sandbox</code>支持以下三种可能的参数：</p><p><strong>raw（原始）</strong>：</p><ul><li>“原始”访问模式意味着出于兼容性的原因，脚本总是需要在页面上下文（MAIN_WORLD）中运行。</li><li>如果当前模式未指定<code>@sandbox</code>，则默认为此模式。</li><li>如果由于内容安全策略（CSP）等原因无法将脚本注入到 MAIN_WORLD 中，则用户脚本会根据此列表的顺序被注入到其他已启用的沙箱环境中。</li></ul><p><strong>JavaScript</strong>：</p><ul><li>“JavaScript”访问模式意味着脚本需要访问<code>unsafeWindow</code>对象。</li><li>在 Firefox 中，会创建一个特殊的上下文（USERSCRIPT_WORLD），该上下文还可以绕过现有的内容安全策略（CSP）。</li><li>然而，这可能会引发新的问题，因为现在需要使用<code>cloneInto</code>和<code>exportFunction</code>来与页面共享对象。</li><li>在其他浏览器中，如果无法使用 USERSCRIPT_WORLD，则会回退到 raw 模式。</li></ul><p><strong>DOM</strong>：</p><ul><li>如果脚本只需要访问 DOM 而不需要直接访问<code>unsafeWindow</code>，则使用此访问模式。</li><li>如果启用此模式，则这些脚本将在扩展的上下文（ISOLATED_WORLD）或其他任何已启用的上下文中执行（因为这些上下文都提供 DOM 访问权限）。</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @sandbox JavaScript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="tag" tabindex="-1">@tag <a class="header-anchor" href="#tag" aria-label="Permalink to &quot;@tag&quot;">​</a></h3><p>您可以在脚本中添加标签，如果这些标签是您系统标签列表的一部分，那么这些标签将在脚本列表中可见。标签可以用于对脚本进行分类，或者将它们标记为特定类型。您可以在脚本的设置页面中找到标签列表。 <img src="`+p+`" alt="dashboard_tags"> 带有标签的脚本示例</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ==UserScript==</span></span>
<span class="line"><span>// @name         My Script</span></span>
<span class="line"><span>// @tag          productivity</span></span>
<span class="line"><span>// ==/UserScript==</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="connect" tabindex="-1">@connect <a class="header-anchor" href="#connect" aria-label="Permalink to &quot;@connect&quot;">​</a></h3><p>这个标签定义了允许通过 GM_xmlhttpRequest 函数检索的域名（不包括顶级域名）及其子域名。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @connect &lt;value&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>&lt;value&gt;</code> 可以是：</p><ul><li>一个域名，如 example.com（这也将允许所有子域名）。</li><li>一个子域名，如 subdomain.example.com。</li><li><code>self</code>，以将当前正在运行脚本的域名加入白名单。</li><li><code>localhost</code>，以访问本地主机。</li><li>一个 IP 地址，如 1.2.3.4。</li><li><code>*</code>，代表所有域名。</li></ul><p>如果无法声明用户脚本可能连接的所有域名，那么以下做法是一个好习惯：</p><ul><li>声明所有已知或至少所有常见的域名，这些域名可能是脚本要连接的，以避免大多数用户看到确认对话框。</li><li>另外，在脚本中添加 <code>@connect *</code>，以允许 Tampermonkey 提供一个“始终允许所有域名”的按钮。</li><li>用户还可以通过在脚本设置选项卡中的用户域名白名单中添加 <code>*</code> 来将所有请求加入白名单。</li></ul><p>注意事项：</p><ul><li>初始 URL 和最终 URL 都将被检查！</li><li>为了与 Scriptish 向后兼容，也会解释 <code>@domain</code> 标签。</li><li>允许多个标签实例。</li></ul><p>更多示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @connect tmnk.net</span></span>
<span class="line"><span>// @connect www.tampermonkey.net</span></span>
<span class="line"><span>// @connect self</span></span>
<span class="line"><span>// @connect localhost</span></span>
<span class="line"><span>// @connect 8.8.8.8</span></span>
<span class="line"><span>// @connect *</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="noframes" tabindex="-1">@noframes <a class="header-anchor" href="#noframes" aria-label="Permalink to &quot;@noframes&quot;">​</a></h3><p>此标签使脚本仅在主页面上运行，而不在 iframe 中运行。这有助于避免脚本在嵌入的框架内执行，可能引发安全问题或不必要的行为。</p><h3 id="updateurl" tabindex="-1">@updateURL <a class="header-anchor" href="#updateurl" aria-label="Permalink to &quot;@updateURL&quot;">​</a></h3><p>用户脚本的更新 URL。注意：要使更新检查生效，必须包含<code>@version</code>标签。此 URL 指向一个包含脚本新版本的位置，Tampermonkey 等用户脚本管理器会定期检查此 URL 以查找更新。</p><h3 id="downloadurl" tabindex="-1">@downloadURL <a class="header-anchor" href="#downloadurl" aria-label="Permalink to &quot;@downloadURL&quot;">​</a></h3><p>当检测到更新时，定义脚本将从哪个 URL 下载。如果使用值<code>none</code>，则不进行更新检查。此标签允许您指定一个特定的下载位置，用于获取脚本的最新版本。</p><h3 id="supporturl" tabindex="-1">@supportURL <a class="header-anchor" href="#supporturl" aria-label="Permalink to &quot;@supportURL&quot;">​</a></h3><p>定义用户可以报告问题和获得个人支持的 URL。这是一个有用的资源链接，用户可以在遇到脚本问题时访问，以获取帮助或提交错误报告。</p><h3 id="webrequest" tabindex="-1">@webRequest <a class="header-anchor" href="#webrequest" aria-label="Permalink to &quot;@webRequest&quot;">​</a></h3><p><code>@webRequest</code>接受一个与<code>GM_webRequest</code>的规则参数相匹配的 JSON 文档。它允许规则在用户脚本加载之前应用。此标签允许您设置网络请求的拦截和处理规则，以便在脚本实际运行之前修改或阻止请求。</p><h3 id="unwrap" tabindex="-1">@unwrap <a class="header-anchor" href="#unwrap" aria-label="Permalink to &quot;@unwrap&quot;">​</a></h3><p>将用户脚本直接注入到页面中，而不使用任何包装器或沙箱。这可能对于 Scriptlets（小型、嵌入式的脚本片段）特别有用，因为它们可能需要直接访问页面的全局作用域。但是，请注意，使用<code>@unwrap</code>可能会增加安全风险，因为它会绕过 Tampermonkey 等管理器提供的某些安全机制。</p><h2 id="应用程序接口" tabindex="-1">应用程序接口 <a class="header-anchor" href="#应用程序接口" aria-label="Permalink to &quot;应用程序接口&quot;">​</a></h2><h3 id="unsafewindow" tabindex="-1">unsafeWindow <a class="header-anchor" href="#unsafewindow" aria-label="Permalink to &quot;unsafeWindow&quot;">​</a></h3><p><code>unsafeWindow</code> 对象允许访问 Tampermonkey 正在运行的页面上的 <code>window</code> 对象，而非 Tampermonkey 扩展自身的 <code>window</code> 对象。这在某些情况下可能很有用，例如，当用户脚本需要访问页面上定义的 JavaScript 库或变量时。</p><h3 id="subresource-integrity" tabindex="-1">Subresource Integrity <a class="header-anchor" href="#subresource-integrity" aria-label="Permalink to &quot;Subresource Integrity&quot;">​</a></h3><p>Subresource Integrity (SRI) 是一种安全功能，它使用户脚本开发者能够确保他们在用户脚本中包含的外部资源（如 JavaScript 库和 CSS 文件）未被篡改或修改。这是通过生成资源的加密哈希值，并将其包含在 <code>@require</code> 和 <code>@resource</code> 标签中来实现的。当用户脚本被安装时，Tampermonkey 会计算资源的哈希值，并将其与包含的哈希值进行比较。如果两个哈希值不匹配，Tampermonkey 将拒绝加载该资源，从而防止攻击者将恶意代码注入到您的用户脚本中。</p><p><code>@resource</code> 和 <code>@require</code> 标签的 URL 中的哈希部分就是用于此目的的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// @resource SRIsecured1 http://example.com/favicon1.ico#md5=ad34bb...</span></span>
<span class="line"><span>// @resource SRIsecured2 http://example.com/favicon2.ico#md5=ac3434...,sha256=23fd34...</span></span>
<span class="line"><span>// @require              https://code.jquery.com/jquery-2.1.1.min.js#md5=45eef...</span></span>
<span class="line"><span>// @require              https://code.jquery.com/jquery-2.1.2.min.js#md5-ac56d...,sha256-6e789...</span></span>
<span class="line"><span>// @require              https://code.jquery.com/jquery-3.6.0.min.js#sha256-/xUj+3OJU...ogEvDej/m4=</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Tampermonkey 原生支持 SHA-256 和 MD5 哈希，其他哈希（如 SHA-1、SHA-384 和 SHA-512）则依赖于 <code>window.crypto</code>。</p><p>如果提供了多个哈希值（用逗号或分号分隔），Tampermonkey 将使用当前支持的最后一个哈希值。所有哈希值都需要以十六进制（hex）或 Base64 格式进行编码。</p><h3 id="gm-addelement-tag-name-attributes-gm-addelement-parent-node-tag-name-attributes" tabindex="-1">GM_addElement(tag_name, attributes), GM_addElement(parent_node, tag_name, attributes) <a class="header-anchor" href="#gm-addelement-tag-name-attributes-gm-addelement-parent-node-tag-name-attributes" aria-label="Permalink to &quot;GM_addElement(tag_name, attributes), GM_addElement(parent_node, tag_name, attributes)&quot;">​</a></h3><p><code>unsafeWindow</code> 对象允许访问 Tampermonkey 正在运行的页面上的 <code>window</code> 对象，而非 Tampermonkey 扩展自身的 <code>window</code> 对象。这在某些情况下可能很有用，例如，当用户脚本需要访问页面上定义的 JavaScript 库或变量时。 <code>GM_addElement</code> 允许 Tampermonkey 脚本向 Tampermonkey 正在运行的页面添加新元素。这可以用于多种目的，例如，如果页面通过内容安全策略 (CSP) 限制这些元素，则可以添加 script 和 img 标签。</p><p>它根据指定的“tag_name”创建一个 HTML 元素，并应用所有给定的“attributes”，然后返回注入的 HTML 元素。如果提供了“parent_node”，则将其附加到该节点上，否则附加到文档的 head 或 body 上。</p><p>有关合适的“attributes”，请参阅相应的文档。例如：</p><ul><li>script 标签</li><li>img 标签</li><li>style 标签</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_addElement(&#39;script&#39;, {</span></span>
<span class="line"><span>  textContent: &#39;window.foo = &quot;bar&quot;;&#39;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GM_addElement(&#39;script&#39;, {</span></span>
<span class="line"><span>  src: &#39;https://example.com/script.js&#39;,</span></span>
<span class="line"><span>  type: &#39;text/javascript&#39;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GM_addElement(document.getElementsByTagName(&#39;div&#39;)[0], &#39;img&#39;, {</span></span>
<span class="line"><span>  src: &#39;https://example.com/image.png&#39;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GM_addElement(shadowDOM, &#39;style&#39;, {</span></span>
<span class="line"><span>  textContent: &#39;div { color: black; };&#39;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>注意：此功能为实验性功能，API 可能会发生变化。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_addStyle(css)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将给定的样式添加到文档中，并返回注入的 style 元素。</p><h3 id="gm-download-details-gm-download-url-name" tabindex="-1">GM_download(details), GM_download(url, name) <a class="header-anchor" href="#gm-download-details-gm-download-url-name" aria-label="Permalink to &quot;GM_download(details), GM_download(url, name)&quot;">​</a></h3><p><code>GM_download</code> 允许用户脚本从指定的 URL 下载文件并将其保存到用户的本地计算机。</p><p><code>GM_download</code> 函数接受以下参数：</p><p><code>details</code> 可以具有以下属性：</p><ul><li><code>url</code>：要下载文件的 URL。这必须是一个有效的 URL，并且必须指向用户可访问的文件。</li><li><code>name</code>：下载文件要使用的名称。这应该包括文件的扩展名，如 <code>.txt</code> 或 <code>.pdf</code>。出于安全原因，文件扩展名需要在 Tampermonkey 的选项页面中列入白名单。</li><li><code>headers</code>：一个包含要在下载请求中包含的 HTTP 头的对象。有关更多详细信息，请参阅 <code>GM_xmlhttpRequest</code>。</li><li><code>saveAs</code>：一个布尔值，指示是否使用用户的默认下载位置，或者提示用户选择其他位置。此选项仅在浏览器 API 模式下有效。</li><li><code>conflictAction</code>：一个字符串，控制当具有此名称的文件已存在时发生的情况。此选项仅在浏览器 API 模式下有效。可能的值是 <code>uniquify</code>（唯一化）、<code>overwrite</code>（覆盖）和 <code>prompt</code>（提示）。有关更多详细信息，请参阅此链接。</li><li><code>onload</code>：下载成功完成时调用的函数。</li><li><code>onerror</code>：下载失败或被取消时调用的函数。</li><li><code>onprogress</code>：如果下载取得了一些进展，要执行的回调函数。</li><li><code>ontimeout</code>：如果下载因超时而失败，要执行的回调函数。</li></ul><p><code>onerror</code> 回调的 <code>download</code> 参数可以具有以下属性：</p><ul><li><code>error</code>：错误原因，可能的值包括 <code>not_enabled</code>（下载功能未由用户启用）、<code>not_whitelisted</code>（请求的文件扩展名未列入白名单）、<code>not_permitted</code>（用户启用了下载功能，但未给予下载权限）、<code>not_supported</code>（浏览器/版本不支持下载功能）、<code>not_succeeded</code>（下载未启动或失败，<code>details</code> 属性可能提供更多信息）。</li><li><code>details</code>：有关该错误的详细信息。</li></ul><p>返回一个具有以下属性的对象：</p><ul><li><code>abort</code>：一个函数，可以调用它来取消此下载。</li></ul><p>如果使用 <code>GM.download</code>，它将返回一个解析为下载详细信息的 Promise，并且还具有一个 <code>abort</code> 函数。</p><p>根据下载模式，<code>GM_info</code> 提供了一个名为 <code>downloadMode</code> 的属性，其值设置为以下值之一：<code>native</code>（原生）、<code>disabled</code>（禁用）或 <code>browser</code>（浏览器）。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_download(&quot;http://example.com/file.txt&quot;, &quot;file.txt&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const download = GM_download({</span></span>
<span class="line"><span>    url: &quot;http://example.com/file.txt&quot;,</span></span>
<span class="line"><span>    name: &quot;file.txt&quot;,</span></span>
<span class="line"><span>    saveAs: true</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// cancel download after 5 seconds</span></span>
<span class="line"><span>window.setTimeout(() =&gt; download.abort(), 5000);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注意：浏览器可能会修改所需的文件名。特别是，如果浏览器认为在当前操作系统上下载该文件是安全的，它可能会添加一个文件扩展名。</p><h3 id="gm-getresourcetext-name" tabindex="-1">GM_getResourceText(name) <a class="header-anchor" href="#gm-getresourcetext-name" aria-label="Permalink to &quot;GM_getResourceText(name)&quot;">​</a></h3><p>允许用户脚本访问通过@resource 指令在用户脚本中包含的资源（例如 JavaScript 或 CSS 文件）的文本内容。</p><p>该函数接受一个参数，即要检索的资源的“名称”。它返回该资源的文本内容，形式为字符串。</p><p>以下是该函数的使用示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const scriptText = GM_getResourceText(&quot;myscript.js&quot;);</span></span>
<span class="line"><span>const scriptText2 = await GM.getResourceText(&quot;myscript.js&quot;);</span></span>
<span class="line"><span>const script = document.createElement(&quot;script&quot;);</span></span>
<span class="line"><span>script.textContent = scriptText;</span></span>
<span class="line"><span>document.body.appendChild(script);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="gm-getresourceurl-name" tabindex="-1">GM_getResourceURL(name) <a class="header-anchor" href="#gm-getresourceurl-name" aria-label="Permalink to &quot;GM_getResourceURL(name)&quot;">​</a></h3><p><code>GM_getResourceURL</code> 允许用户脚本访问通过脚本头部 <code>@resource</code> 标签包含的资源（如 CSS 或图像文件）的 URL。</p><p>该函数接受一个参数，即要检索资源的“名称”。它返回该资源的 URL，形式为字符串。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const imageUrl = GM_getResourceURL(&quot;myimage.png&quot;);</span></span>
<span class="line"><span>const imageUrl2 = await GM.getResourceUrl(&quot;myimage.png&quot;);</span></span>
<span class="line"><span>const image = document.createElement(&quot;img&quot;);</span></span>
<span class="line"><span>image.src = imageUrl;</span></span>
<span class="line"><span>document.body.appendChild(image);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>重要提示：此函数的基于 Promise 的版本称为 <code>GM.getResourceUrl</code>（在“Url”中的“u”和“l”为小写）。</p><h3 id="gm-info" tabindex="-1">GM_info <a class="header-anchor" href="#gm-info" aria-label="Permalink to &quot;GM_info&quot;">​</a></h3><p>获取有关脚本和任务管理（TM）的一些信息。相关信息对象可能如下所示：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type ScriptGetInfo = {</span></span>
<span class="line"><span>    container?: { // 5.3+ | Firefox only</span></span>
<span class="line"><span>        id: string,</span></span>
<span class="line"><span>        name?: string</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    downloadMode: string,</span></span>
<span class="line"><span>    isFirstPartyIsolation?: boolean,</span></span>
<span class="line"><span>    isIncognito: boolean,</span></span>
<span class="line"><span>    sandboxMode: SandboxMode, // 4.18+</span></span>
<span class="line"><span>    scriptHandler: string,</span></span>
<span class="line"><span>    scriptMetaStr: string | null,</span></span>
<span class="line"><span>    scriptUpdateURL: string | null,</span></span>
<span class="line"><span>    scriptWillUpdate: boolean,</span></span>
<span class="line"><span>    userAgentData: UADataValues, // 4.19+</span></span>
<span class="line"><span>    version?: string,</span></span>
<span class="line"><span>    script: {</span></span>
<span class="line"><span>        antifeatures: { [antifeature: string]: { [locale: string]: string } },</span></span>
<span class="line"><span>        author: string | null,</span></span>
<span class="line"><span>        blockers: string[],</span></span>
<span class="line"><span>        connects: string[],</span></span>
<span class="line"><span>        copyright: string | null,</span></span>
<span class="line"><span>        deleted?: number | undefined,</span></span>
<span class="line"><span>        description_i18n: { [locale: string]: string } | null,</span></span>
<span class="line"><span>        description: string,</span></span>
<span class="line"><span>        downloadURL: string | null,</span></span>
<span class="line"><span>        excludes: string[],</span></span>
<span class="line"><span>        fileURL: string | null,</span></span>
<span class="line"><span>        grant: string[],</span></span>
<span class="line"><span>        header: string | null,</span></span>
<span class="line"><span>        homepage: string | null,</span></span>
<span class="line"><span>        icon: string | null,</span></span>
<span class="line"><span>        icon64: string | null,</span></span>
<span class="line"><span>        includes: string[],</span></span>
<span class="line"><span>        lastModified: number,</span></span>
<span class="line"><span>        matches: string[],</span></span>
<span class="line"><span>        name_i18n: { [locale: string]: string } | null,</span></span>
<span class="line"><span>        name: string,</span></span>
<span class="line"><span>        namespace: string | null,</span></span>
<span class="line"><span>        position: number,</span></span>
<span class="line"><span>        resources: Resource[],</span></span>
<span class="line"><span>        supportURL: string | null,</span></span>
<span class="line"><span>        system?: boolean | undefined,</span></span>
<span class="line"><span>        &#39;run-at&#39;: string | null,</span></span>
<span class="line"><span>        &#39;run-in&#39;: string[] | null, // 5.3+</span></span>
<span class="line"><span>        unwrap: boolean | null,</span></span>
<span class="line"><span>        updateURL: string | null,</span></span>
<span class="line"><span>        version: string,</span></span>
<span class="line"><span>        webRequest: WebRequestRule[] | null,</span></span>
<span class="line"><span>        options: {</span></span>
<span class="line"><span>            check_for_updates: boolean,</span></span>
<span class="line"><span>            comment: string | null,</span></span>
<span class="line"><span>            compatopts_for_requires: boolean,</span></span>
<span class="line"><span>            compat_wrappedjsobject: boolean,</span></span>
<span class="line"><span>            compat_metadata: boolean,</span></span>
<span class="line"><span>            compat_foreach: boolean,</span></span>
<span class="line"><span>            compat_powerful_this: boolean | null,</span></span>
<span class="line"><span>            sandbox: string | null,</span></span>
<span class="line"><span>            noframes: boolean | null,</span></span>
<span class="line"><span>            unwrap: boolean | null,</span></span>
<span class="line"><span>            run_at: string | null,</span></span>
<span class="line"><span>            run_in: string | null, // 5.3+</span></span>
<span class="line"><span>            override: {</span></span>
<span class="line"><span>                use_includes: string[],</span></span>
<span class="line"><span>                orig_includes: string[],</span></span>
<span class="line"><span>                merge_includes: boolean,</span></span>
<span class="line"><span>                use_matches: string[],</span></span>
<span class="line"><span>                orig_matches: string[],</span></span>
<span class="line"><span>                merge_matches: boolean,</span></span>
<span class="line"><span>                use_excludes: string[],</span></span>
<span class="line"><span>                orig_excludes: string[],</span></span>
<span class="line"><span>                merge_excludes: boolean,</span></span>
<span class="line"><span>                use_connects: string[],</span></span>
<span class="line"><span>                orig_connects: string[],</span></span>
<span class="line"><span>                merge_connects: boolean,</span></span>
<span class="line"><span>                use_blockers: string[],</span></span>
<span class="line"><span>                orig_run_at: string | null,</span></span>
<span class="line"><span>                orig_run_in: string[] | null, // 5.3+</span></span>
<span class="line"><span>                orig_noframes: boolean | null</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type SandboxMode = &#39;js&#39; | &#39;raw&#39; | &#39;dom&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type Resource = {</span></span>
<span class="line"><span>    name: string,</span></span>
<span class="line"><span>    url: string,</span></span>
<span class="line"><span>    error?: string,</span></span>
<span class="line"><span>    content?: string,</span></span>
<span class="line"><span>    meta?: string</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type WebRequestRule = {</span></span>
<span class="line"><span>    selector: { include?: string | string[], match?: string | string[], exclude?: string | string[] } | string,</span></span>
<span class="line"><span>    action: string | {</span></span>
<span class="line"><span>        cancel?: boolean,</span></span>
<span class="line"><span>        redirect?: {</span></span>
<span class="line"><span>            url: string,</span></span>
<span class="line"><span>            from?: string,</span></span>
<span class="line"><span>            to?: string</span></span>
<span class="line"><span>        } | string</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type UADataValues = {</span></span>
<span class="line"><span>    brands?: {</span></span>
<span class="line"><span>        brand: string;</span></span>
<span class="line"><span>        version: string;</span></span>
<span class="line"><span>    }[],</span></span>
<span class="line"><span>    mobile?: boolean,</span></span>
<span class="line"><span>    platform?: string,</span></span>
<span class="line"><span>    architecture?: string,</span></span>
<span class="line"><span>    bitness?: string</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br></div></div><h3 id="gm-log-message" tabindex="-1">GM_log(message) <a class="header-anchor" href="#gm-log-message" aria-label="Permalink to &quot;GM_log(message)&quot;">​</a></h3><p>直接在控制台记录一条消息。</p><h3 id="gm-notification-details-ondone-gm-notification-text-title-image-onclick" tabindex="-1">GM_notification(details, ondone), GM_notification(text, title, image, onclick) <a class="header-anchor" href="#gm-notification-details-ondone-gm-notification-text-title-image-onclick" aria-label="Permalink to &quot;GM_notification(details, ondone), GM_notification(text, title, image, onclick)&quot;">​</a></h3><p><code>GM_notification</code>允许用户使用提供的消息和其他可选参数在屏幕上显示通知。</p><p>该函数接受多个参数，可以是一个包含详细信息的对象，也可以是多个参数。</p><p>详细信息对象可以包含以下属性，其中一些也可以作为直接参数使用：</p><p>可用选项包括：</p><ul><li><code>text</code>：字符串类型，包含要在通知中显示的消息。</li><li><code>title</code>：通知的标题。</li><li><code>tag</code>（5.0+版本）：此标签用于标识此通知。这样，你可以通过再次调用<code>GM_notification</code>并使用相同的标签来更新现有的通知。如果不提供标签，则每次都会创建一个新的通知。</li><li><code>image</code>：要在通知中显示的图像的 URL。</li><li><code>highlight</code>：布尔值，指示是否高亮显示发送通知的标签（除非设置了<code>text</code>，否则为必需）。</li><li><code>silent</code>：布尔值，指示是否不播放声音。</li><li><code>timeout</code>：以毫秒为单位的时间，之后通知应自动关闭。</li><li><code>url</code>（5.0+版本）：用户点击通知时要加载的 URL。你可以在<code>onclick</code>事件处理器中调用<code>event.preventDefault()</code>来阻止加载 URL。</li><li><code>onclick</code>：当用户点击通知时要调用的回调函数。</li><li><code>ondone</code>：当通知关闭（无论是由超时还是点击触发的）或标签被高亮显示时调用的回调函数。</li></ul><p>该函数不返回任何值。</p><p>如果没有提供<code>url</code>和<code>tag</code>，则当用户脚本卸载时（例如，当页面重新加载或标签页关闭时），通知将关闭（5.0+版本）。</p><p>以下是一个函数使用方法的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_notification({</span></span>
<span class="line"><span>  text: &quot;This is the notification message.&quot;,</span></span>
<span class="line"><span>  title: &quot;Notification Title&quot;,</span></span>
<span class="line"><span>  url: &#39;https:/example.com/&#39;,</span></span>
<span class="line"><span>  onclick: (event) =&gt; {</span></span>
<span class="line"><span>    // The userscript is still running, so don&#39;t open example.com</span></span>
<span class="line"><span>    event.preventDefault();</span></span>
<span class="line"><span>    // Display an alert message instead</span></span>
<span class="line"><span>    alert(&#39;I was clicked!&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const clicked = await GM.notification({ text: &quot;Click me.&quot; });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="gm-openintab-url-options-gm-openintab-url-loadinbackground" tabindex="-1">GM_openInTab(url, options), GM_openInTab(url, loadInBackground) <a class="header-anchor" href="#gm-openintab-url-options-gm-openintab-url-loadinbackground" aria-label="Permalink to &quot;GM_openInTab(url, options), GM_openInTab(url, loadInBackground)&quot;">​</a></h3><p><code>GM_openInTab</code>允许用户脚本在浏览器中打开一个新标签页并导航到指定的 URL。</p><p>该函数接受两个参数：</p><ol><li><p>一个名为<code>url</code>的字符串，包含要在新标签页中打开的页面的 URL。</p></li><li><p>一个可选的选项对象，可用于自定义新标签页的行为。可用选项包括：</p><ul><li><code>active</code>：一个布尔值，指示新标签页是否应该处于活动状态（被选中）。默认值为<code>false</code>。</li><li><code>insert</code>：一个整数，指示新标签页应该在标签栏中的哪个位置插入。默认值为<code>false</code>，这意味着新标签页将被添加到标签栏的末尾。</li><li><code>setParent</code>：一个布尔值，指示新标签页是否应被视为当前标签页的子标签页。默认值为<code>false</code>。</li><li><code>incognito</code>：一个布尔值，使标签页在隐身模式/私密模式窗口中打开。</li><li><code>loadInBackground</code>：一个布尔值，与<code>active</code>具有相反的含义，并且是为了实现与 Greasemonkey 3.x 的兼容性而添加的。</li></ul></li></ol><p>该函数返回一个对象，该对象包含<code>close</code>函数、<code>onclose</code>监听器和一个名为<code>closed</code>的标志。</p><p>以下是一个函数使用方法的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Open a new tab and navigate to the specified URL</span></span>
<span class="line"><span>GM_openInTab(&quot;https://www.example.com/&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gm-registermenucommand-name-callback-options-or-accesskey" tabindex="-1">GM_registerMenuCommand(name, callback, options_or_accessKey) <a class="header-anchor" href="#gm-registermenucommand-name-callback-options-or-accesskey" aria-label="Permalink to &quot;GM_registerMenuCommand(name, callback, options_or_accessKey)&quot;">​</a></h3><p><code>GM_registerMenuCommand</code>允许用户脚本在浏览器的用户脚本菜单中添加一个新条目，并指定当选择该菜单项时要调用的函数。如果从不同框架创建的菜单项具有相同的名称、标题和访问键，则它们将被合并为一个菜单条目。</p><p>该函数接受三个参数：</p><ol><li><code>name</code>（字符串）：要显示在菜单项中的文本。</li><li><code>callback</code>（函数）：当选择菜单项时要调用的函数。该函数将接收一个参数，即当前活动的标签页。从Tampermonkey 4.14开始，会传递一个<code>MouseEvent</code>或<code>KeyboardEvent</code>作为函数参数。</li><li><code>accessKey</code>（字符串，可选）：一个可选的访问键。请注意下面的描述。可以指定选项对象或访问键。</li></ol><p>从v4.20+版本开始，还可以传递一个可选的<code>options</code>对象来自定义菜单项。<code>options</code>对象具有以下属性：</p><ul><li><code>id</code>（v5.0+版本，数字或字符串，可选）：之前<code>GM_registerMenuCommand</code>调用返回的可选数字。如果指定了此参数，则使用新选项更新相应的菜单项。如果没有指定或找不到菜单项，则创建一个新的菜单项。</li><li><code>accessKey</code>（字符串，可选）：菜单项的可选访问键。这可用于为菜单项创建快捷键。例如，如果访问键是“s”，则当用户打开Tampermonkey的弹出菜单时，可以通过按“s”来选择菜单项。请注意，可以在浏览器中配置全局快捷键来打开Tampermonkey的弹出菜单。（在Chrome中为<code>chrome://extensions/shortcuts</code>，在Firefox中为“about:addons”+“管理扩展快捷键”）</li><li><code>autoClose</code>（布尔值，可选）：一个可选的布尔参数，指定在点击菜单项后是否应关闭弹出菜单。默认值为<code>true</code>。请注意，此设置对添加到页面上下文菜单中的菜单命令部分没有影响。</li><li><code>title</code>（v5.0+版本，字符串，可选）：一个可选的字符串，指定菜单项的标题。当用户将鼠标悬停在菜单项上时，将显示此标题作为工具提示。</li></ul><p>该函数返回一个菜单条目ID，可用于注销命令。</p><p>以下是一个函数使用方法的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const menu_command_id_1 = GM_registerMenuCommand(&quot;Show Alert&quot;, function(event: MouseEvent | KeyboardEvent) {</span></span>
<span class="line"><span>  alert(&quot;Menu item selected&quot;);</span></span>
<span class="line"><span>}, {</span></span>
<span class="line"><span>  accessKey: &quot;a&quot;,</span></span>
<span class="line"><span>  autoClose: true</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const menu_command_id_2 = GM_registerMenuCommand(&quot;Log&quot;, function(event: MouseEvent | KeyboardEvent) {</span></span>
<span class="line"><span>  console.log(&quot;Menu item selected&quot;);</span></span>
<span class="line"><span>}, &quot;l&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="gm-unregistermenucommand-menucmdid" tabindex="-1">GM_unregisterMenuCommand(menuCmdId) <a class="header-anchor" href="#gm-unregistermenucommand-menucmdid" aria-label="Permalink to &quot;GM_unregisterMenuCommand(menuCmdId)&quot;">​</a></h3><p><code>GM_unregisterMenuCommand</code> 从用户脚本在浏览器中的菜单中移除一个已存在的条目。</p><p>该函数接受一个参数，即要移除的菜单项的 ID。它不返回任何值。</p><p>以下是如何使用该函数的一个示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const menu_command_id = GM_registerMenuCommand(...);</span></span>
<span class="line"><span>GM_unregisterMenuCommand(menu_command_id);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gm-setclipboard-data-info-cb" tabindex="-1">GM_setClipboard(data, info, cb) <a class="header-anchor" href="#gm-setclipboard-data-info-cb" aria-label="Permalink to &quot;GM_setClipboard(data, info, cb)&quot;">​</a></h3><p><code>GM_setClipboard</code> 将剪贴板的文本设置为一个指定的值。</p><p>该函数接收一个参数 “data”，即要设置为剪贴板文本的字符串，一个参数 “info”，以及一个可选的回调函数 “cb”。</p><p>“info” 可以仅是一个表示文本或HTML类型的字符串（但请注意，具体实现可能有所不同）。</p><p>“cb” 是一个可选的回调函数，当剪贴板设置完成后会被调用。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    type: &#39;text&#39;,</span></span>
<span class="line"><span>    mimetype: &#39;text/plain&#39;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_setClipboard(&quot;This is the clipboard text.&quot;, &quot;text&quot;, () =&gt; console.log(&quot;Clipboard set!&quot;));</span></span>
<span class="line"><span>await GM.setClipboard(&quot;This is the newer clipboard text.&quot;, &quot;text&quot;);</span></span>
<span class="line"><span>console.log(&#39;Clipboard set again!&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="gm-gettab-callback" tabindex="-1">GM_getTab(callback) <a class="header-anchor" href="#gm-gettab-callback" aria-label="Permalink to &quot;GM_getTab(callback)&quot;">​</a></h3><p><code>GM_getTab</code> 函数接受一个参数，即一个回调函数。该回调函数会传入一个对象，只要该标签页保持打开状态，该对象就会一直存在。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_getTab((tab) =&gt; console.log(tab));</span></span>
<span class="line"><span>const t = await GM.getTab();</span></span>
<span class="line"><span>console.log(t);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="gm-savetab-tab-cb" tabindex="-1">GM_saveTab(tab, cb) <a class="header-anchor" href="#gm-savetab-tab-cb" aria-label="Permalink to &quot;GM_saveTab(tab, cb)&quot;">​</a></h3><p><code>GM_saveTab</code> 函数允许用户脚本保存有关标签页的信息以供后续使用。</p><p>该函数接受一个“tab”参数，该参数是一个对象，包含了要保存的关于标签页的信息，以及一个可选的回调函数“cb”。</p><p><code>GM_saveTab</code> 函数会保存提供的标签页信息，以便稍后可以使用 <code>GM_getTab</code> 函数来检索它。</p><p>以下是一个用户脚本中使用 <code>GM_saveTab</code> 函数的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_getTab(function(tab) {</span></span>
<span class="line"><span>    tab.newInfo = &quot;new!&quot;;</span></span>
<span class="line"><span>    GM_saveTab(tab);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>await GM.saveTab(tab);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个例子中，<code>GM_saveTab</code> 函数被调用时，传入了由 <code>GM_getTab</code> 函数返回的标签页对象，并且添加了一个名为 <code>&quot;newInfo&quot;</code> 的新键。</p><h3 id="gm-gettabs-callback" tabindex="-1">GM_getTabs(callback) <a class="header-anchor" href="#gm-gettabs-callback" aria-label="Permalink to &quot;GM_getTabs(callback)&quot;">​</a></h3><p><code>GM_getTabs</code> 函数接受一个参数：一个回调函数。该回调函数会接收到关于标签页的信息。</p><p>传递给回调函数的“tabs”对象包含了多个对象，每个对象都代表了由 <code>GM_saveTab</code> 存储的已保存标签页的信息。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_getTabs((tabs) =&gt; {</span></span>
<span class="line"><span>    for (const [tabId, tab] of Object.entries(tabs)) {</span></span>
<span class="line"><span>        console.log(\`tab \${tabId}\`, tab);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>const tabs = await GM.getTabs();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="gm-setvalue-key-value" tabindex="-1">GM_setValue(key, value) <a class="header-anchor" href="#gm-setvalue-key-value" aria-label="Permalink to &quot;GM_setValue(key, value)&quot;">​</a></h3><p><code>GM_setValue</code> 允许用户脚本设置用户脚本存储中特定键的值。</p><p><code>GM_setValue</code> 函数接受两个参数：</p><ol><li>一个字符串，指定要设置值的键。</li><li>要为该键设置的值。值（包括嵌套对象属性）可以为 <code>null</code> 或 <code>object</code>、<code>string</code>、<code>number</code>、<code>undefined</code> 或 <code>boolean</code> 类型。</li></ol><p><code>GM_setValue</code> 函数不返回任何值。相反，它在用户脚本的存储中为指定的键设置提供的值。</p><p>以下是 <code>GM_setValue</code> 及其异步版本 <code>GM.setValue</code> 在用户脚本中可能的使用示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_setValue(&quot;someKey&quot;, &quot;someData&quot;);</span></span>
<span class="line"><span>await GM.setValue(&quot;otherKey&quot;, &quot;otherData&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gm-getvalue-key-defaultvalue" tabindex="-1">GM_getValue(key, defaultValue) <a class="header-anchor" href="#gm-getvalue-key-defaultvalue" aria-label="Permalink to &quot;GM_getValue(key, defaultValue)&quot;">​</a></h3><p><code>GM_getValue</code> 函数允许用户脚本检索用户脚本存储中特定键的值。它接受两个参数：</p><ol><li>一个字符串，指定要检索值的键。</li><li>如果在用户脚本的存储中不存在该键，则要返回的默认值。这个默认值可以是任何类型（字符串、数字、对象等）。</li></ol><p><code>GM_getValue</code> 函数返回用户脚本存储中指定键的值，如果键不存在，则返回默认值。</p><p>以下是一个在用户脚本中使用 <code>GM_getValue</code> 函数的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const someKey = GM_getValue(&quot;someKey&quot;, null);</span></span>
<span class="line"><span>const otherKey = await GM.getValue(&quot;otherKey&quot;, null);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gm-deletevalue-key" tabindex="-1">GM_deleteValue(key) <a class="header-anchor" href="#gm-deletevalue-key" aria-label="Permalink to &quot;GM_deleteValue(key)&quot;">​</a></h3><p>从用户脚本的存储中删除‘key’。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_deleteValue(&quot;someKey&quot;);</span></span>
<span class="line"><span>await GM.deleteValue(&quot;otherKey&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gm-listvalues" tabindex="-1">GM_listValues() <a class="header-anchor" href="#gm-listvalues" aria-label="Permalink to &quot;GM_listValues()&quot;">​</a></h3><p>GM_listValues 函数返回所有存储数据的键名列表。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const keys = GM_listValues();</span></span>
<span class="line"><span>const asyncKeys = await GM.listValues();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gm-setvalues-values-v5-3" tabindex="-1">GM_setValues(values) <sup>v5.3+</sup> <a class="header-anchor" href="#gm-setvalues-values-v5-3" aria-label="Permalink to &quot;GM_setValues(values) &lt;sup&gt;v5.3+&lt;/sup&gt;&quot;">​</a></h3><p><code>GM_setValues</code>函数允许用户脚本同时在用户脚本的存储中设置多个键值对。</p><p><code>GM_setValues</code>函数接受一个参数：</p><p>一个对象，其中每个键值对都对应一个键和要为该键设置的值。值（包括嵌套对象属性）可以是<code>null</code>或<code>object</code>、<code>string</code>、<code>number</code>、<code>undefined</code>或<code>boolean</code>类型。</p><p><code>GM_setValues</code>函数不返回任何值。相反，它在用户脚本的存储中为指定的键设置提供的值。</p><p>以下是一个关于如何在用户脚本中使用<code>GM_setValues</code>及其异步对应函数<code>GM.setValues</code>的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_setValues({ foo: 1, bar: 2 });</span></span>
<span class="line"><span>await GM.setValues({ foo: 1, bar: 2 });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gm-getvalues-keysordefaults-v5-3" tabindex="-1">GM_getValues(keysOrDefaults) <sup>v5.3+</sup> <a class="header-anchor" href="#gm-getvalues-keysordefaults-v5-3" aria-label="Permalink to &quot;GM_getValues(keysOrDefaults) &lt;sup&gt;v5.3+&lt;/sup&gt;&quot;">​</a></h3><p>GM_getValues 函数允许用户脚本检索用户脚本存储中多个键的值。如果键不存在，它还可以提供默认值。</p><p>GM_getValues 函数接受一个参数：</p><p>要么是一个字符串数组，指定要检索其值的键；要么是一个对象，指定如果键不存在时要返回的默认值。这个默认值对象可以包含任何类型的键（字符串、数字、对象等）。 GM_getValues 函数返回一个对象，包含用户脚本存储中指定键的值，如果键不存在，则返回默认值。</p><p>以下是一个在用户脚本中使用 GM_getValues 函数的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const values = GM_getValues([&#39;foo&#39;, &#39;bar&#39;]);</span></span>
<span class="line"><span>const asyncValues = await GM.getValues([&#39;foo&#39;, &#39;bar&#39;]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const defaultValues = GM_getValues({ foo: 1, bar: 2, baz: 3 });</span></span>
<span class="line"><span>const asyncDefaultValues = await GM.getValues({ foo: 1, bar: 2, baz: 3 });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个示例中，GM_getValues 函数被调用时传入一个键的数组或一个包含默认值的对象。它返回一个对象，其中包含指定键的值，如果键不存在，则返回相应的默认值。</p><h3 id="gm-deletevalues-keys-v5-3" tabindex="-1">GM_deleteValues(keys) <sup>v5.3+</sup> <a class="header-anchor" href="#gm-deletevalues-keys-v5-3" aria-label="Permalink to &quot;GM_deleteValues(keys) &lt;sup&gt;v5.3+&lt;/sup&gt;&quot;">​</a></h3><p>GM_deleteValues 函数允许用户脚本同时删除用户脚本存储中的多个键。</p><p>GM_deleteValues 函数接受一个参数：</p><p>一个字符串数组，指定要从用户脚本存储中删除的键。</p><p>GM_deleteValues 函数不返回任何值。相反，它会从用户脚本存储中删除指定的键。</p><p>以下是一个在用户脚本中使用 GM_deleteValues 及其异步版本 GM.deleteValues 的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_deleteValues([&#39;foo&#39;, &#39;bar&#39;]);</span></span>
<span class="line"><span>await GM.deleteValues([&#39;foo&#39;, &#39;bar&#39;]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gm-addvaluechangelistener-key-key-old-value-new-value-remote-void" tabindex="-1">GM_addValueChangeListener(key, (key, old_value, new_value, remote) =&gt; void) <a class="header-anchor" href="#gm-addvaluechangelistener-key-key-old-value-new-value-remote-void" aria-label="Permalink to &quot;GM_addValueChangeListener(key, (key, old_value, new_value, remote) =&gt; void)&quot;">​</a></h3><p>GM_addValueChangeListener 函数允许用户脚本添加一个监听器，用于监听用户脚本存储中特定键值的变化。</p><p>该函数接受两个参数：</p><p>一个字符串，指定要监视变化的键。</p><p>一个回调函数，当键的值发生变化时，将调用此函数。回调函数的签名应如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  function(key, oldValue, newValue, remote) {</span></span>
<span class="line"><span>      // key is the key whose value has changed</span></span>
<span class="line"><span>      // oldValue is the previous value of the key</span></span>
<span class="line"><span>      // newValue is the new value of the key</span></span>
<span class="line"><span>      // remote is a boolean indicating whether the change originated from a different userscript instance</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="gm-addvaluechangelistener-函数与监听器id" tabindex="-1">GM_addValueChangeListener 函数与监听器ID <a class="header-anchor" href="#gm-addvaluechangelistener-函数与监听器id" aria-label="Permalink to &quot;GM_addValueChangeListener 函数与监听器ID&quot;">​</a></h3><p>GM_addValueChangeListener 函数返回一个“listenerId”值，可以使用该值在稍后通过 GM_removeValueChangeListener 函数移除监听器。对于 GM.addValueChangeListener 和 GM.removeValueChangeListener 函数，情况完全相同，唯一的区别是它们都返回一个 Promise。</p><p>以下是一个在用户脚本中使用 GM_addValueChangeListener 函数的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Add a listener for changes to the &quot;savedTab&quot; key</span></span>
<span class="line"><span>var listenerId = GM_addValueChangeListener(&quot;savedTab&quot;, function(key, oldValue, newValue, remote) {</span></span>
<span class="line"><span>  // Print a message to the console when the value of the &quot;savedTab&quot; key changes</span></span>
<span class="line"><span>  console.log(&quot;The value of the &#39;&quot; + key + &quot;&#39; key has changed from &#39;&quot; + oldValue + &quot;&#39; to &#39;&quot; + newValue + &quot;&#39;&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>用户脚本可以利用 GM_addValueChangeListener 与其他标签页中的其他用户脚本实例进行通信。</p><h3 id="gm-removevaluechangelistener-listenerid" tabindex="-1">GM_removeValueChangeListener(listenerId) <a class="header-anchor" href="#gm-removevaluechangelistener-listenerid" aria-label="Permalink to &quot;GM_removeValueChangeListener(listenerId)&quot;">​</a></h3><p>GM_removeValueChangeListener 和 GM.removeValueChangeListener 均接收一个名为“listenerId”的参数，并根据此 ID 删除对应的变化监听器。</p><h3 id="gm-xmlhttprequest-details" tabindex="-1">GM_xmlhttpRequest(details) <a class="header-anchor" href="#gm-xmlhttprequest-details" aria-label="Permalink to &quot;GM_xmlhttpRequest(details)&quot;">​</a></h3><p>GM_xmlhttpRequest 允许用户脚本发送 HTTP 请求并处理响应。该函数接受一个参数：一个包含要发送的请求的详细信息以及接收到响应时要调用的回调函数的对象。</p><p>该对象可以具有以下属性：</p><ul><li>method：字符串，通常是 GET、HEAD、POST、PUT、DELETE 等之一。</li><li>url：字符串或 URL 对象，表示目标 URL。</li><li>headers：例如 user-agent、referer 等（某些特殊头信息在 Safari 和 Android 浏览器中不受支持）。</li><li>data：字符串、Blob、File、对象、数组、FormData 或 URLSearchParams（可选），表示要通过 POST 请求发送的一些数据。</li><li>redirect：follow、error 或 manual 之一；控制检测到重定向时要执行的操作（构建版本 6180+，强制使用 fetch 模式）。</li><li>cookie：要修补到发送的 cookie 集中的 cookie。</li><li>cookiePartition（v5.2+）：对象（可选），包含用于发送和接收分区 cookie 的分区键。</li><li>topLevelSite（可选）：字符串，表示分区 cookie 的顶级框架站点。</li><li>binary：以二进制模式发送数据字符串。</li><li>nocache：不缓存资源。</li><li>revalidate：重新验证可能已缓存的内容。</li><li>timeout：以毫秒为单位的超时时间。</li><li>context：将添加到响应对象的属性。</li><li>responseType：arraybuffer、blob、json 或 stream 之一。</li><li>overrideMimeType：请求的 MIME 类型。</li><li>anonymous：不随请求发送 cookie（强制使用 fetch 模式）。</li><li>fetch：使用 fetch 而不是 XMLHttpRequest 请求（在 Chrome 中，这会导致 details.timeout 和 xhr.onprogress 无法工作，并使 xhr.onreadystatechange 只接收 readyState DONE（==4）事件）。</li><li>user：用于身份验证的用户名。</li><li>password：密码。</li><li>onabort：如果请求被中止，要执行的回调函数。</li><li>onerror：如果请求以错误结束，要执行的回调函数。</li><li>onloadstart：在加载开始时执行，如果 responseType 设置为 stream，则提供对 stream 对象的访问。</li><li>onprogress：如果请求取得了一些进展，要执行的回调函数。</li><li>onreadystatechange：如果请求的 readyState 发生变化，要执行的回调函数。</li><li>ontimeout：如果请求因超时而失败，要执行的回调函数。</li><li>onload：如果请求已加载，要执行的回调函数。</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  function(response) {</span></span>
<span class="line"><span>    // response is an object containing the details of the response</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>response 对象的属性</strong></p><ul><li>finalUrl：数据加载后经过所有重定向的最终 URL。</li><li>readyState：请求的 readyState。</li><li>status：请求的 HTTP 状态码。</li><li>statusText：请求的 HTTP 状态文本。</li><li>responseHeaders：请求的响应头。</li><li>response：如果 details.responseType 已设置，则为作为对象的响应数据。</li><li>responseXML：作为 XML 文档的响应数据。</li><li>responseText：作为纯字符串的响应数据。</li></ul><p><strong>GM_xmlhttpRequest 返回的对象</strong></p><p>GM_xmlhttpRequest 返回一个具有以下属性的对象：</p><ul><li>abort：用于取消此请求的函数。</li></ul><p><strong>GM.xmlHttpRequest 返回的 Promise</strong></p><p>GM.xmlHttpRequest 返回一个解析为响应的 Promise，并且也具有一个 abort 函数。</p><p><strong>用户脚本中使用 GM_xmlhttpRequest 函数的示例</strong></p><p>以下是一个在用户脚本中使用 GM_xmlhttpRequest 函数的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_xmlhttpRequest({</span></span>
<span class="line"><span>  method: &quot;GET&quot;,</span></span>
<span class="line"><span>  url: &quot;https://example.com/&quot;,</span></span>
<span class="line"><span>  headers: {</span></span>
<span class="line"><span>    &quot;Content-Type&quot;: &quot;application/json&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  onload: function(response) {</span></span>
<span class="line"><span>    console.log(response.responseText);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const r = await GM.xmlHttpRequest({ url: &quot;https://example.com/&quot; }).catch(e =&gt; console.error(e));</span></span>
<span class="line"><span>console.log(r.responseText);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>“请注意，<code>details</code> 中的同步标志不受支持。</p><p>重要提示：</p><p>如果您想使用此方法，请务必查阅关于 <code>@connect</code> 的文档。</p><p>此函数的基于 Promise 的版本称为 <code>GM.xmlHttpRequest</code>（注意 <code>http</code> 中的 <code>h</code> 是大写）。”</p><h3 id="gm-webrequest-rules-listener" tabindex="-1">GM_webRequest(rules, listener) <a class="header-anchor" href="#gm-webrequest-rules-listener" aria-label="Permalink to &quot;GM_webRequest(rules, listener)&quot;">​</a></h3><p>注意：此API为实验性API，可能会随时更改。在Tampermonkey 5.2及以上版本中已不再可用。</p><p><code>GM_webRequest</code>（重新）注册用于网页请求操作的规则和触发规则的监听器。如果您只需要注册规则，则最好使用<code>@webRequest</code>头部。请注意，<code>webRequest</code>仅处理类型为<code>sub_frame</code>、<code>script</code>、<code>xhr</code>和<code>websocket</code>的请求。</p><p><strong>参数</strong>：</p><ul><li><code>rules</code> - <code>object[]</code>，包含以下属性的规则数组： <ul><li><code>selector</code> - <code>string|object</code>，触发规则的URL，字符串值为<code>{ include: [selector] }</code>的简写，对象属性包括： <ul><li><code>include</code> - <code>string|string[]</code>，用于触发规则的URL、模式和正则表达式；</li><li><code>match</code> - <code>string|string[]</code>，用于触发规则的URL和模式；</li><li><code>exclude</code> - <code>string|string[]</code>，不触发规则的URL、模式和正则表达式；</li></ul></li><li><code>action</code> - <code>string|object</code>，对请求执行的操作，字符串值<code>&quot;cancel&quot;</code>为<code>{ cancel: true }</code>的简写，对象属性包括： <ul><li><code>cancel</code> - <code>boolean</code>，是否取消请求；</li><li><code>redirect</code> - <code>string|object</code>，重定向到某个URL，该URL必须包含在任何<code>@match</code>或<code>@include</code>头部中。当为字符串时，重定向到静态URL。如果为对象： <ul><li><code>from</code> - <code>string</code>，用于提取URL某些部分的正则表达式，例如<code>&quot;([^:]+)://match.me/(.*)&quot;</code>；</li><li><code>to</code> - <code>string</code>，用于替换的模式，例如<code>&quot;$1://redirected.to/$2&quot;</code>；</li></ul></li></ul></li><li><code>listener</code> - <code>function</code>，当规则触发时调用，无法影响规则操作，参数包括： <ul><li><code>info</code> - <code>string</code>，操作类型：&quot;cancel&quot;、&quot;redirect&quot;；</li><li><code>message</code> - <code>string</code>，&quot;ok&quot;或&quot;error&quot;；</li><li><code>details</code> - <code>object</code>，有关请求和规则的信息： <ul><li><code>rule</code> - <code>object</code>，触发的规则；</li><li><code>url</code> - <code>string</code>，请求的URL；</li><li><code>redirect_url</code> - <code>string</code>，请求被重定向到的URL；</li><li><code>description</code> - <code>string</code>，错误描述。</li></ul></li></ul></li></ul></li></ul><p>示例</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_webRequest([</span></span>
<span class="line"><span>    { selector: &#39;*cancel.me/*&#39;, action: &#39;cancel&#39; },</span></span>
<span class="line"><span>    { selector: { include: &#39;*&#39;, exclude: &#39;http://exclude.me/*&#39; }, action: { redirect: &#39;http://new_static.url&#39; } },</span></span>
<span class="line"><span>    { selector: { match: &#39;*://match.me/*&#39; }, action: { redirect: { from: &#39;([^:]+)://match.me/(.*)&#39;,  to: &#39;$1://redirected.to/$2&#39; } } }</span></span>
<span class="line"><span>], function(info, message, details) {</span></span>
<span class="line"><span>    console.log(info, message, details);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="gm-cookie-list-details-callback" tabindex="-1">GM_cookie.list(details[, callback]) <a class="header-anchor" href="#gm-cookie-list-details-callback" aria-label="Permalink to &quot;GM_cookie.list(details[, callback])&quot;">​</a></h3><p>注意：目前，仅Tampermonkey的BETA版本支持<code>httpOnly</code> cookie。</p><p>Tampermonkey会检查脚本是否具有对给定<code>details.url</code>参数的<code>@include</code>或<code>@match</code>访问权限！</p><p><strong>参数</strong>：</p><ul><li><code>details</code> 对象，包含要检索的cookie的属性</li><li><code>url</code> 字符串（可选），表示要从中检索cookie的URL（默认为当前文档URL）</li><li><code>domain</code> 字符串（可选），表示要检索的cookie的域</li><li><code>name</code> 字符串（可选），表示要检索的cookie的名称</li><li><code>path</code> 字符串（可选），表示要检索的cookie的路径</li><li><code>partitionKey</code>（v5.2+）对象（可选），表示cookie的分区键，使用空对象以检索所有cookie</li><li><code>topLevelSite</code> 字符串（可选），表示cookie的顶级框架站点</li><li><code>callback</code> 函数（可选），当检索到cookie时调用。该函数将接收两个参数： <ul><li><code>cookies</code> 对象数组，表示检索到的cookie</li><li><code>error</code> 字符串，如果发生错误，则表示错误消息，否则为null。</li></ul></li></ul><p><strong>cookie对象具有以下属性</strong>：</p><ul><li><code>domain</code> 字符串，表示cookie的域</li><li><code>expirationDate</code> 数字（可选），自Unix纪元以来的cookie过期日期（以秒为单位）。如果未指定，则cookie永不过期。</li><li><code>firstPartyDomain</code> 字符串（可选），表示cookie的第一方域。</li><li><code>partitionKey</code>（v5.2+）对象（可选），包含cookie的分区键</li><li><code>topLevelSite</code> 字符串（可选），表示cookie的顶级框架站点</li><li><code>hostOnly</code> 布尔值，指示cookie是否为仅主机cookie</li><li><code>httpOnly</code> 布尔值，指示cookie是否为HTTP专用cookie</li><li><code>name</code> 字符串，表示cookie的名称</li><li><code>path</code> 字符串，表示cookie的路径</li><li><code>sameSite</code> 字符串，指示cookie的SameSite属性</li><li><code>secure</code> 布尔值，指示cookie是否需要安全连接</li><li><code>session</code> 布尔值，指示cookie是否为会话cookie</li><li><code>value</code> 字符串，表示cookie的值 示例用法：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Retrieve all cookies with name &quot;mycookie&quot;</span></span>
<span class="line"><span>GM_cookie.list({ name: &quot;mycookie&quot; }, function(cookies, error) {</span></span>
<span class="line"><span>  if (!error) {</span></span>
<span class="line"><span>    console.log(cookies);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.error(error);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Retrieve all cookies for the current domain</span></span>
<span class="line"><span>const cookies = await GM.cookie.list()</span></span>
<span class="line"><span>console.log(cookies);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="gm-cookie-set-details-callback" tabindex="-1">GM_cookie.set(details[, callback]) <a class="header-anchor" href="#gm-cookie-set-details-callback" aria-label="Permalink to &quot;GM_cookie.set(details[, callback])&quot;">​</a></h3><p><strong>设置Cookie的示例用法</strong>：</p><p>使用以下参数设置具有给定详细信息的Cookie。支持的属性定义如下：</p><p>参数： details：一个包含要设置的Cookie详细信息的对象。该对象可以具有以下属性：</p><ul><li>url（字符串，可选）：与Cookie关联的URL。如果未指定，则Cookie与当前文档的URL关联。</li><li>name（字符串）：Cookie的名称。</li><li>value（字符串）：Cookie的值。</li><li>domain（字符串，可选）：Cookie的域。</li><li>firstPartyDomain（字符串，可选）：Cookie的第一方域。</li><li>partitionKey（v5.2+ 对象，可选）：包含Cookie的分区键。</li><li>topLevelSite（字符串，可选）：表示Cookie的顶级框架站点。</li><li>path（字符串，可选）：Cookie的路径。</li><li>secure（布尔值，可选）：是否仅应通过HTTPS发送Cookie。</li><li>httpOnly（布尔值，可选）：是否应将Cookie标记为HttpOnly。</li><li>expirationDate（数字，可选）：自Unix纪元以来的Cookie过期日期（以秒为单位）。如果未指定，则Cookie永不过期。</li><li>callback（函数，可选）：操作完成时要调用的函数。该函数传递一个参数： <ul><li>error（字符串，可选）：如果设置Cookie时出错，则包含错误消息。否则，未定义。</li></ul></li></ul><p>示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_cookie.set({</span></span>
<span class="line"><span>  url: &#39;https://example.com&#39;,</span></span>
<span class="line"><span>  name: &#39;name&#39;,</span></span>
<span class="line"><span>  value: &#39;value&#39;,</span></span>
<span class="line"><span>  domain: &#39;.example.com&#39;,</span></span>
<span class="line"><span>  path: &#39;/&#39;,</span></span>
<span class="line"><span>  secure: true,</span></span>
<span class="line"><span>  httpOnly: true,</span></span>
<span class="line"><span>  expirationDate: Math.floor(Date.now() / 1000) + (60 * 60 * 24 * 30) // Expires in 30 days</span></span>
<span class="line"><span>}, function(error) {</span></span>
<span class="line"><span>  if (error) {</span></span>
<span class="line"><span>    console.error(error);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.log(&#39;Cookie set successfully.&#39;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GM.cookie.set({</span></span>
<span class="line"><span>  name: &#39;name&#39;,</span></span>
<span class="line"><span>  value: &#39;value&#39;</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>.then(() =&gt; {</span></span>
<span class="line"><span>  console.log(&#39;Cookie set successfully.&#39;);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>.catch((error) =&gt; {</span></span>
<span class="line"><span>  console.error(error);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="gm-cookie-delete-details-callback" tabindex="-1">GM_cookie.delete(details, callback) <a class="header-anchor" href="#gm-cookie-delete-details-callback" aria-label="Permalink to &quot;GM_cookie.delete(details, callback)&quot;">​</a></h3><p><strong>删除Cookie的示例用法</strong>：</p><p>要删除一个Cookie，你需要提供一个包含至少以下属性之一的<code>details</code>对象：</p><p>参数：</p><ul><li><code>url</code>（字符串，可选）：与Cookie关联的URL。如果未指定<code>url</code>，则使用当前文档的URL。</li><li><code>name</code>（字符串，可选）：要删除的Cookie的名称。</li><li><code>firstPartyDomain</code>（字符串，可选）：要删除的Cookie的第一方域。</li><li><code>partitionKey</code>（v5.2+ 对象，可选）：表示要删除的Cookie的分区键。</li><li><code>topLevelSite</code>（字符串，可选）：表示Cookie的顶级框架站点。</li></ul><p><code>callback</code>函数是可选的，当Cookie已被删除或发生错误时，将调用此函数。它接受一个参数：</p><ul><li><code>error</code>（字符串，可选）：错误消息，如果Cookie成功删除，则为<code>undefined</code>。</li></ul><p>示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GM_cookie.delete({ name: &#39;cookie_name&#39; }, function(error) {</span></span>
<span class="line"><span>    if (error) {</span></span>
<span class="line"><span>        console.error(error);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        console.log(&#39;Cookie deleted successfully&#39;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="window-onurlchange" tabindex="-1">window.onurlchange <a class="header-anchor" href="#window-onurlchange" aria-label="Permalink to &quot;window.onurlchange&quot;">​</a></h3><p>如果一个脚本在单页应用程序上运行，那么它可以使用 window.onurlchange 来监听URL的变化。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ==UserScript==</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>// @grant window.onurlchange</span></span>
<span class="line"><span>// ==/UserScript==</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (window.onurlchange === null) {</span></span>
<span class="line"><span>    // feature is supported</span></span>
<span class="line"><span>    window.addEventListener(&#39;urlchange&#39;, (info) =&gt; ...);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="window-close" tabindex="-1">window.close <a class="header-anchor" href="#window-close" aria-label="Permalink to &quot;window.close&quot;">​</a></h3><p>通常，JavaScript 不允许通过 <code>window.close</code> 关闭标签页。然而，用户脚本在请求了 <code>@grant</code> 权限后，可以做到这一点。</p><p>注意：出于安全考虑，不允许关闭窗口中的最后一个标签页。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ==UserScript==</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>// @grant window.close</span></span>
<span class="line"><span>// ==/UserScript==</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (condition) {</span></span>
<span class="line"><span>    window.close();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="window-focus" tabindex="-1">window.focus <a class="header-anchor" href="#window-focus" aria-label="Permalink to &quot;window.focus&quot;">​</a></h3><p><code>window.focus</code> 会将窗口带到前台，而 <code>unsafeWindow.focus</code> 可能会因为用户设置而不起作用。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ==UserScript==</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>// @grant window.focus</span></span>
<span class="line"><span>// ==/UserScript==</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (condition) {</span></span>
<span class="line"><span>    window.focus();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="cdata" tabindex="-1">&lt;&gt;&lt;![CDATA[...]]&gt;&lt;/&gt; <a class="header-anchor" href="#cdata" aria-label="Permalink to &quot;\\&lt;\\&gt;\\&lt;![CDATA[...]]\\&gt;\\&lt;/\\&gt;&quot;">​</a></h3><p>基于CDATA的方式存储元数据是通过兼容性选项支持的。Tampermonkey会尝试自动检测脚本是否需要启用此选项。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var inline_src = (&lt;&gt;&lt;![CDATA[</span></span>
<span class="line"><span>    console.log(&#39;Hello World!&#39;);</span></span>
<span class="line"><span>]]&gt;&lt;/&gt;).toString();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>eval(inline_src);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,340)]))}const h=n(i,[["render",o]]);export{m as __pageData,h as default};
