import{_ as p,y as l,a as i,o as t,a2 as a,D as e,g as r}from"./chunks/framework.Dy7Nxh_Q.js";const c="/assets/js-doc.DTMTA3OS.png",f=JSON.parse('{"title":"专题：异步编程","description":"","frontmatter":{},"headers":[],"relativePath":"competition/lanqiaoWeb/异步编程.md","filePath":"competition/lanqiaoWeb/异步编程.md","lastUpdated":1743996090000}'),o={name:"competition/lanqiaoWeb/异步编程.md"},b={class:"flex gap-4"};function u(d,s,m,h,g,v){const n=l("Tag");return t(),i("div",null,[s[0]||(s[0]=a(`<h1 id="专题-异步编程" tabindex="-1">专题：异步编程 <a class="header-anchor" href="#专题-异步编程" aria-label="Permalink to &quot;专题：异步编程&quot;">​</a></h1><p>蓝桥杯Web组 省赛备赛</p><hr><h1 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-label="Permalink to &quot;异步编程&quot;">​</a></h1><ol><li><p>使用回调的异步编程</p></li><li><p>期约(<code>Promise</code>)</p></li><li><p><code>async</code>/<code>await</code></p></li></ol><hr><h1 id="使用回调的异步编程" tabindex="-1">使用回调的异步编程 <a class="header-anchor" href="#使用回调的异步编程" aria-label="Permalink to &quot;使用回调的异步编程&quot;">​</a></h1><p>回调就是函数，可以传给其它函数。其它函数会在满足一定条件（或发生一定事件）后，调用这个函数。</p><h2 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-label="Permalink to &quot;定时器&quot;">​</a></h2><p><code>setTimeout</code>:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const ding = () =&gt; console.log(&#39;dong&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setTimeout(ding, 1000);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>setInterval</code>:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const beep = () =&gt; console.log(&#39;beep&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setInterval(beep, 1000);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const beep = () =&gt; console.log(&#39;beep&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let intervalId = setInterval(beep, 1000);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let count = 0;</span></span>
<span class="line"><span>const beep = () =&gt; {</span></span>
<span class="line"><span>  count++;</span></span>
<span class="line"><span>  console.log(&#39;beep&#39;);</span></span>
<span class="line"><span>  if (count === 3) clearInterval(intervalId);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let intervalId = setInterval(beep, 1000);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><hr><h1 id="定时器-1" tabindex="-1">定时器 <a class="header-anchor" href="#定时器-1" aria-label="Permalink to &quot;定时器&quot;">​</a></h1><p>注意：<code>setTimeout</code>不是真正的等待时间，而是只是一个几秒后执行任务的<strong>回调钩子</strong>。</p>`,18)),e(n,{name:"灯的颜色变化",difficulty:2,year:2022,id:2451}),s[1]||(s[1]=a(`<hr><h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><p>客户端JavaScript几乎全都是事件驱动的。等待用户做一些事，然后响应用户的动作。</p><p>事件监听器是通过<code>addEventListener</code>来添加的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let okey = document.querySelector(&#39;#okey&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>okey.addEventListener(&#39;click&#39;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&#39;clicked&#39;);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>思考</strong>：如何绑定一个事件？</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;button&gt;Click me&lt;/button&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;button onclick=&quot;handleClick()&quot;&gt;Click me&lt;/button&gt;  &lt;!-- 原生JavaScript --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;button @click=&quot;handleClick&quot;&gt;Click me&lt;/button&gt; &lt;!-- Vue --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h1 id="defineemits" tabindex="-1"><code>defineEmits</code> <a class="header-anchor" href="#defineemits" aria-label="Permalink to &quot;\`defineEmits\`&quot;">​</a></h1><p><a href="https://vuejs.org/guide/components/events.html" target="_blank" rel="noreferrer">https://vuejs.org/guide/components/events.html</a></p><p><strong>思考</strong>：Vue3中如何声明一个组件将发出的事件？</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- MyComponent --&gt;</span></span>
<span class="line"><span>&lt;button @click=&quot;handleClick&quot;&gt;Click Me&lt;/button&gt; &lt;!-- 事件将在组件内部被处理 --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- MyComponent --&gt;</span></span>
<span class="line"><span>&lt;button @click=&quot;$emit(&#39;someEvent&#39;)&quot;&gt;Click Me&lt;/button&gt; &lt;!-- 事件将传递给父组件 --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- MyComponent --&gt;</span></span>
<span class="line"><span>&lt;button @click=&quot;$emit(&#39;someEvent&#39;, 1, 2, 3)&quot;&gt;Click Me&lt;/button&gt; &lt;!-- 传递参数 --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在<code>setup</code>函数中声明事件：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export default {</span></span>
<span class="line"><span>  emits: [&#39;inFocus&#39;, &#39;submit&#39;],</span></span>
<span class="line"><span>  setup(props, ctx) {</span></span>
<span class="line"><span>    ctx.emit(&#39;submit&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export default {</span></span>
<span class="line"><span>  emits: [&#39;inFocus&#39;, &#39;submit&#39;],</span></span>
<span class="line"><span>  setup(props, { emit }) {</span></span>
<span class="line"><span>    emit(&#39;submit&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在<code>&lt;script setup&gt;</code>中声明事件：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script setup&gt;</span></span>
<span class="line"><span>defineEmits([&#39;inFocus&#39;, &#39;submit&#39;])</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script setup&gt;</span></span>
<span class="line"><span>const emit = defineEmits([&#39;inFocus&#39;, &#39;submit&#39;])</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const buttonClick = () =&gt; { emit(&#39;submit&#39;) }</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const emit = defineEmits&lt;{</span></span>
<span class="line"><span>  inFocus: [id: number]</span></span>
<span class="line"><span>  submit: [value: string]</span></span>
<span class="line"><span>}&gt;()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h2 id="调用事件处理程序" tabindex="-1">调用事件处理程序 <a class="header-anchor" href="#调用事件处理程序" aria-label="Permalink to &quot;调用事件处理程序&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ele.addEventListener(&#39;click&#39;, (event) =&gt; {</span></span>
<span class="line"><span>  console.log(event.target);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ele.addEventListener(&#39;click&#39;, function() {</span></span>
<span class="line"><span>  console.log(this);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h1 id="node-js中的回调" tabindex="-1">Node.js中的回调 <a class="header-anchor" href="#node-js中的回调" aria-label="Permalink to &quot;Node.js中的回调&quot;">​</a></h1><h2 id="fs模块" tabindex="-1"><code>fs</code>模块 <a class="header-anchor" href="#fs模块" aria-label="Permalink to &quot;\`fs\`模块&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const fs = require(&quot;fs&quot;); // &quot;fs&quot;模块有文件系统相关的API</span></span>
<span class="line"><span>let options = {</span></span>
<span class="line"><span>  // 保存程序选项的对象</span></span>
<span class="line"><span>  // 默认选项可以写在这里</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 读取配置文件，然后调用回调函数</span></span>
<span class="line"><span>fs.readFile(&quot;config.json&quot;, &quot;utf-8&quot;, (err, text) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    // 如果有错误，显示一条警告消息，但仍然继续</span></span>
<span class="line"><span>    console.warn(&quot;Could not read config file:&quot;, err);</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    // 否则，解析文件内容并赋值给选项对象</span></span>
<span class="line"><span>    Object.assign(options, JSON.parse(text));</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  startProgram(options);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><hr><h2 id="https模块" tabindex="-1"><code>https</code>模块 <a class="header-anchor" href="#https模块" aria-label="Permalink to &quot;\`https\`模块&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const https = require(&quot;https&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function getText(url, callback) {</span></span>
<span class="line"><span>    request = https.get(url);</span></span>
<span class="line"><span>    request.on(&quot;response&quot;, response =&gt; { // 处理 &quot;response&quot; 事件</span></span>
<span class="line"><span>        // 此时收到了响应头</span></span>
<span class="line"><span>        let httpStatus = response.statusCode;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 此时并没有收到 HTTP 响应体，因此还要再注册几个事件处理程序，以便收到响应体时被调用</span></span>
<span class="line"><span>        response.setEncoding(&quot;utf-8&quot;);  </span></span>
<span class="line"><span>        let body = &quot;&quot;;                  </span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        response.on(&quot;data&quot;, chunk =&gt; { body += chunk; }); // 每个响应体块就绪时</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        response.on(&quot;end&quot;, () =&gt; {   // 响应完成时</span></span>
<span class="line"><span>            if (httpStatus === 200) {  </span></span>
<span class="line"><span>                callback(null, body);  // 把响应体传给回调</span></span>
<span class="line"><span>            } else { </span></span>
<span class="line"><span>                callback(httpStatus, null);  // 否则传递错误</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>思考：这个复杂的代码里一共有几个回调😂？</p><hr><h1 id="期约-promise" tabindex="-1">期约(<code>Promise</code>) <a class="header-anchor" href="#期约-promise" aria-label="Permalink to &quot;期约(\`Promise\`)&quot;">​</a></h1><p>期约是一个对象，表示异步操作的结果。</p><p>期约有一个最重要的优点，就是以线性<code>then</code>方法调用链的形式表达一系列异步的操作，而不用把每个操作嵌套在前一个操作的回调内部。</p><h2 id="使用fetch-api" tabindex="-1">使用Fetch API <a class="header-anchor" href="#使用fetch-api" aria-label="Permalink to &quot;使用Fetch API&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fetch(&quot;/api/user/profile&quot;).then(response =&gt; {  // response: Response</span></span>
<span class="line"><span>  response.json().then(profile =&gt; {  // profile: JSON object</span></span>
<span class="line"><span>    data.value = profile; // 在Vue3的onMounted钩子里更新数据</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fetch(&quot;/api/user/profile&quot;)</span></span>
<span class="line"><span> .then(response =&gt; {</span></span>
<span class="line"><span>    return response.json();</span></span>
<span class="line"><span> })</span></span>
<span class="line"><span> .then(profile =&gt; {</span></span>
<span class="line"><span>    data.value = profile;</span></span>
<span class="line"><span>  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fetch(url)</span></span>
<span class="line"><span> .then(callback1)</span></span>
<span class="line"><span> .then(callback2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fetch(url)</span></span>
<span class="line"><span> .then(callback1, onError1)</span></span>
<span class="line"><span> .then(callback2, onError2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fetch(url)</span></span>
<span class="line"><span> .then(callback1, onError1)</span></span>
<span class="line"><span> .then(callback2, onError2)</span></span>
<span class="line"><span> .then(callback3)</span></span>
<span class="line"><span> .catch(error =&gt; { console.error(error); }) // 用于处理Promise链中的错误</span></span>
<span class="line"><span> .finally(() =&gt; { console.log(&quot;done&quot;); }); // 用于收尾工作，无论错误与否均会触发</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h2 id="使用axios-api" tabindex="-1">使用Axios API <a class="header-anchor" href="#使用axios-api" aria-label="Permalink to &quot;使用Axios API&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>axios.get(&quot;/api/user/profile&quot;).then(response =&gt; {  // response: AxiosResponse</span></span>
<span class="line"><span>  data.value = response.data; // 在Vue3的onMounted钩子里更新数据</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,47)),r("div",b,[e(n,{name:"全球新冠疫情数据统计",difficulty:3,year:2023,id:5137}),e(n,{name:"课程列表",difficulty:3,year:2022,id:2457})]),s[2]||(s[2]=a('<hr><h1 id="🎉-js-doc" tabindex="-1">🎉 <code>JS Doc</code>！ <a class="header-anchor" href="#🎉-js-doc" aria-label="Permalink to &quot;🎉 `JS Doc`！&quot;">​</a></h1><p>VS Code在不安装插件的情况下，原生对JS Doc提供支持。</p><p>这意味着对于很多后端开发者，或者习惯TypeScript的前端开发者来说，JavaScript不再缺少类型信息。</p><p class="w-1/2 mx-auto border border-red-300"><img src="'+c+`" alt="js-doc"></p><hr><h1 id="async和await" tabindex="-1"><code>async</code>和<code>await</code> <a class="header-anchor" href="#async和await" aria-label="Permalink to &quot;\`async\`和\`await\`&quot;">​</a></h1><p>允许我们以同步的方式编写异步的代码。</p><p>我们发现，基于线性<code>then</code>的异步代码不能像正常的同步代码一样<strong>返回一个值</strong>或是<strong>抛出一个异常</strong>。</p><p><code>await</code>关键字接收一个期约，将其转换成一个返回值或一个抛出的异常。</p><div class="w-full justify-center flex gap-20"><div class="flex-1"><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fetch(&quot;/api/user/profile&quot;)</span></span>
<span class="line"><span>.then(response =&gt; {</span></span>
<span class="line"><span>    return response.json();</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>.then(profile =&gt; {</span></span>
<span class="line"><span>    data.value = profile;</span></span>
<span class="line"><span>  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><div class="flex-1"><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let response = await fetch(&quot;/api/user/profile&quot;);</span></span>
<span class="line"><span>let profile = await response.json();</span></span>
<span class="line"><span>data.value = profile;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div></div><p>📢 注意：只能在<code>async</code>定义的函数中使用<code>await</code>关键字。</p><p>把函数标注为<code>async</code>意味着它<strong>返回一个期约</strong>，而不是直接返回一个值。</p><hr><h2 id="并行期约" tabindex="-1">并行期约 <a class="header-anchor" href="#并行期约" aria-label="Permalink to &quot;并行期约&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>async function getJSON(url) {</span></span>
<span class="line"><span>  let response = await fetch(url);</span></span>
<span class="line"><span>  let body = await response.json();</span></span>
<span class="line"><span>  return body;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let value1 = await getJSON(&quot;/api/user/profile&quot;);</span></span>
<span class="line"><span>let value2 = await getJSON(&quot;/api/user/friends&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>以上代码的问题在于它本不必顺序执行。要等候一组并发执行的<code>async</code>函数，可以使用<code>Promise.all()</code>方法。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let [value1, value2] = await Promise.all([</span></span>
<span class="line"><span>  getJSON(&quot;/api/user/profile&quot;),</span></span>
<span class="line"><span>  getJSON(&quot;/api/user/friends&quot;)</span></span>
<span class="line"><span>]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h2 id="练习-串行期约" tabindex="-1">练习：串行期约 <a class="header-anchor" href="#练习-串行期约" aria-label="Permalink to &quot;练习：串行期约&quot;">​</a></h2><p>有这样一组未知数量的<code>url</code>数组，为了避免网络过载，你一次只能抓取一个<code>url</code>，编写一个函数来构造这样的期约。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function fetchAll(urls) {</span></span>
<span class="line"><span>  const results = [];</span></span>
<span class="line"><span>  function fetchOne(url) {</span></span>
<span class="line"><span>    // TODO</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  // TODO</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function fetchAll(urls) {</span></span>
<span class="line"><span>  const results = [];</span></span>
<span class="line"><span>  function fetchOne(url) {</span></span>
<span class="line"><span>    return fetch(url).then(response =&gt; response.json());</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  urls.forEach(url =&gt; {</span></span>
<span class="line"><span>    results.push(fetchOne(url));</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  return Promise.all(results);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function fetchAll(urls) {</span></span>
<span class="line"><span>  const results = [];</span></span>
<span class="line"><span>  function fetchOne(url) {</span></span>
<span class="line"><span>    return fetch(url)</span></span>
<span class="line"><span>              .then(response =&gt; response.json())</span></span>
<span class="line"><span>              .then(result =&gt; {</span></span>
<span class="line"><span>                results.push(result);</span></span>
<span class="line"><span>              })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  let p = Promise.resolve(); // 立即兑现的期约</span></span>
<span class="line"><span>  urls.forEach(url =&gt; {</span></span>
<span class="line"><span>    p = p.then(() =&gt; fetchOne(url));</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  return p.then(() =&gt; results);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><hr><h2 id="练习-async-await的实现原理" tabindex="-1">练习：<code>async/await</code>的实现原理 <a class="header-anchor" href="#练习-async-await的实现原理" aria-label="Permalink to &quot;练习：\`async/await\`的实现原理&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>async function f(x) { /* body */ }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function f(x) {</span></span>
<span class="line"><span>  return new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>      resolve(function(x) { /* body */ }(x));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    catch (e) {</span></span>
<span class="line"><span>      reject(e);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,28))])}const y=p(o,[["render",u]]);export{f as __pageData,y as default};
