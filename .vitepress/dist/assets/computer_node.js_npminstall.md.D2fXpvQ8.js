import{_ as n,a as s,o as e,a2 as l}from"./chunks/framework.Dy7Nxh_Q.js";const m=JSON.parse('{"title":"npm install 原理","description":"","frontmatter":{},"headers":[],"relativePath":"computer/node.js/npminstall.md","filePath":"computer/node.js/npminstall.md","lastUpdated":1739699399000}'),p={name:"computer/node.js/npminstall.md"};function i(o,a,d,r,c,t){return e(),s("div",null,a[0]||(a[0]=[l(`<h1 id="npm-install-原理" tabindex="-1">npm install 原理 <a class="header-anchor" href="#npm-install-原理" aria-label="Permalink to &quot;npm install 原理&quot;">​</a></h1><h2 id="在执行-npm-install-的时候发生了什么" tabindex="-1">在执行 <code>npm install</code> 的时候发生了什么？ <a class="header-anchor" href="#在执行-npm-install-的时候发生了什么" aria-label="Permalink to &quot;在执行 \`npm install\` 的时候发生了什么？&quot;">​</a></h2><p>当运行 <code>npm install</code> 命令时，npm 会根据项目根目录下的 <code>package.json</code> 文件中的依赖信息来安装所需的包及其依赖。整个过程可以分为以下几个关键步骤：</p><h3 id="_1-解析-package-json" tabindex="-1">1. 解析 <code>package.json</code> <a class="header-anchor" href="#_1-解析-package-json" aria-label="Permalink to &quot;1. 解析 \`package.json\`&quot;">​</a></h3><ul><li><strong>读取依赖声明</strong>：npm 从 <code>package.json</code> 中读取 <code>dependencies</code> 和 <code>devDependencies</code> 字段，以确定需要安装哪些包以及它们的版本范围。</li><li><strong>解析版本范围</strong>：对于每个依赖项，npm 解析其版本范围（如 <code>^1.2.3</code> 或 <code>~4.5.6</code>），以了解哪些版本是可接受的。</li></ul><h3 id="_2-构建依赖树" tabindex="-1">2. 构建依赖树 <a class="header-anchor" href="#_2-构建依赖树" aria-label="Permalink to &quot;2. 构建依赖树&quot;">​</a></h3><ul><li><strong>构建完整的依赖关系图</strong>：npm 递归地构建一个依赖关系图，包含所有直接依赖及其间接依赖。这个图可能非常复杂，因为每个包都可能有自己的依赖。</li><li><strong>解决版本冲突</strong>：如果多个依赖项要求同一包的不同版本，npm 会尝试找到一个满足所有需求的公共版本。如果找不到这样的版本，它可能会安装多个版本以确保兼容性。</li></ul><h3 id="_3-安装依赖" tabindex="-1">3. 安装依赖 <a class="header-anchor" href="#_3-安装依赖" aria-label="Permalink to &quot;3. 安装依赖&quot;">​</a></h3><ul><li><strong>扁平化安装</strong>：默认情况下，npm 使用“扁平化”安装策略，这意味着尽可能将所有依赖直接放置在 <code>node_modules</code> 目录下，而不是创建深层嵌套的结构。这种做法减少了模块查找的时间，并且有助于避免重复安装相同的包。</li><li><strong>排序规则</strong>：在 <code>node_modules</code> 中，<code>.bin</code> 文件夹总是位于最前面，接着是带有 <code>@</code> 符号的作用域包（scoped packages），然后按照字母顺序排列其他包。</li><li><strong>广度优先遍历</strong>：npm 使用广度优先算法来遍历依赖树。这意味着它首先处理项目根目录下的直接依赖，然后再逐层处理每个依赖包的子依赖，直到所有的依赖都被处理完毕。</li></ul><h3 id="_4-检查与验证" tabindex="-1">4. 检查与验证 <a class="header-anchor" href="#_4-检查与验证" aria-label="Permalink to &quot;4. 检查与验证&quot;">​</a></h3><ul><li><strong>版本匹配检查</strong>：在安装过程中，npm 会检查已安装的包是否符合 <code>package.json</code> 中指定的版本要求。如果某个包的版本不符合预期，npm 会尝试安装适合的版本。</li><li><strong>peerDependencies 处理</strong>：对于 <code>peerDependencies</code>，npm 会确保这些依赖在项目的根 <code>node_modules</code> 中存在适当的版本，否则会发出警告或错误。</li></ul><h3 id="_5-创建-package-lock-json" tabindex="-1">5. 创建 <code>package-lock.json</code> <a class="header-anchor" href="#_5-创建-package-lock-json" aria-label="Permalink to &quot;5. 创建 \`package-lock.json\`&quot;">​</a></h3><ul><li><strong>锁定依赖版本</strong>：为了确保不同环境之间的依赖一致性，npm 会生成或更新 <code>package-lock.json</code> 文件。该文件精确记录了每个依赖的确切版本，使得在任何地方运行 <code>npm install</code> 都能重现完全相同的依赖环境。</li></ul><h3 id="_6-完成安装" tabindex="-1">6. 完成安装 <a class="header-anchor" href="#_6-完成安装" aria-label="Permalink to &quot;6. 完成安装&quot;">​</a></h3><ul><li><strong>完成消息</strong>：一旦所有依赖都被成功安装并且没有任何冲突，npm 将输出一条完成消息，告知用户安装已经结束。</li><li><strong>清理临时文件</strong>：最后，npm 可能会清理一些临时文件或缓存，以保持系统的整洁。</li></ul><h2 id="什么是扁平化" tabindex="-1">什么是扁平化 <a class="header-anchor" href="#什么是扁平化" aria-label="Permalink to &quot;什么是扁平化&quot;">​</a></h2><p>扁平化（Flattening）在 npm 的上下文中指的是依赖管理的一种策略，旨在减少 node_modules 目录中模块的嵌套层级。具体来说，扁平化安装意味着尽可能地将所有依赖直接放置在顶层的 node_modules 文件夹中。</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>假设你有一个项目依赖于两个库 A 和 B，而这两个库又都依赖于 C 的不同版本。在传统的非扁平化安装中，可能会出现如下结构：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node_modules/</span></span>
<span class="line"><span>├── A/</span></span>
<span class="line"><span>│   └── node_modules/</span></span>
<span class="line"><span>│       └── C@1.0.0</span></span>
<span class="line"><span>└── B/</span></span>
<span class="line"><span>    └── node_modules/</span></span>
<span class="line"><span>        └── C@2.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>而在扁平化安装下，如果 C 的两个版本可以兼容，那么结果可能是这样的：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node_modules/</span></span>
<span class="line"><span>├── A/</span></span>
<span class="line"><span>├── B/</span></span>
<span class="line"><span>└── C@2.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>或者，如果有冲突且无法协调版本，可能会安装两个版本：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node_modules/</span></span>
<span class="line"><span>├── A/</span></span>
<span class="line"><span>├── B/</span></span>
<span class="line"><span>├── C@1.0.0</span></span>
<span class="line"><span>└── C@2.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="实行扁平化策略原因" tabindex="-1">实行扁平化策略原因 <a class="header-anchor" href="#实行扁平化策略原因" aria-label="Permalink to &quot;实行扁平化策略原因&quot;">​</a></h2><p>在 npm 的扁平化安装策略中，node_modules 目录结构被设计为尽可能减少嵌套层级，并且尽量将所有依赖直接放置在顶层 node_modules 文件夹中。这种策略有几个关键原因：</p><h3 id="_1-模块解析机制" tabindex="-1">1. 模块解析机制 <a class="header-anchor" href="#_1-模块解析机制" aria-label="Permalink to &quot;1. 模块解析机制&quot;">​</a></h3><p>Node.js 使用一种特殊的模块解析算法来查找和加载模块。当一个模块尝试引入另一个模块时，Node.js 会从当前文件所在的目录开始向上逐层搜索 node_modules 文件夹，直到找到所需的模块或到达根目录。</p><p>例如，如果模块 A 和 B 都依赖于模块 C，而 C 被安装在顶层 node_modules 中，那么无论 A 或 B 在哪里，它们都能正确地解析到顶层的 C。因此，没有必要在每个依赖包的子 node_modules 文件夹中重复安装 C。</p><h3 id="_2-版本协调" tabindex="-1">2. 版本协调 <a class="header-anchor" href="#_2-版本协调" aria-label="Permalink to &quot;2. 版本协调&quot;">​</a></h3><p>npm 尝试协调不同依赖之间的版本冲突。如果模块 A 和 B 都可以使用同一个版本的 C，npm 将只安装一个版本的 C 到顶层 node_modules 中。这不仅减少了冗余，还确保了整个项目中只有一个版本的 C 被使用，从而避免潜在的兼容性问题。</p><h3 id="_3-路径长度限制" tabindex="-1">3. 路径长度限制 <a class="header-anchor" href="#_3-路径长度限制" aria-label="Permalink to &quot;3. 路径长度限制&quot;">​</a></h3><p>尤其在 Windows 系统上，文件路径长度是有限制的（通常为 260 个字符）。深层嵌套的 node_modules 结构可能会导致路径过长的问题。通过扁平化安装，npm 可以有效避免这种情况的发生。</p><h3 id="_4-性能优化" tabindex="-1">4. 性能优化 <a class="header-anchor" href="#_4-性能优化" aria-label="Permalink to &quot;4. 性能优化&quot;">​</a></h3><p>扁平化的 node_modules 结构减少了 Node.js 解析模块时需要遍历的目录层数，从而提高了模块解析的速度。此外，它也使得 node_modules 更易于管理和理解。</p><h2 id="版本冲突处理" tabindex="-1">版本冲突处理 <a class="header-anchor" href="#版本冲突处理" aria-label="Permalink to &quot;版本冲突处理&quot;">​</a></h2><p>然而，当确实存在无法协调的版本冲突时，npm 会在顶层 node_modules 中安装多个版本的模块。例如，如果 A 依赖于 C@1.0.0 而 B 依赖于 C@2.0.0 并且这两个版本不兼容，则 npm 会分别安装这两个版本到顶层 node_modules 中：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node_modules/</span></span>
<span class="line"><span>├── A/</span></span>
<span class="line"><span>├── B/</span></span>
<span class="line"><span>├── C@1.0.0</span></span>
<span class="line"><span>└── C@2.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这种情况下，npm 还会在各自的 node_modules 文件夹中创建符号链接（symlinks）指向正确的 C 版本，以便 A 和 B 分别使用它们所需的具体版本：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node_modules/</span></span>
<span class="line"><span>├── A/</span></span>
<span class="line"><span>│   └── node_modules/</span></span>
<span class="line"><span>│       └── C -&gt; ../../C@1.0.0</span></span>
<span class="line"><span>├── B/</span></span>
<span class="line"><span>│   └── node_modules/</span></span>
<span class="line"><span>│       └── C -&gt; ../../C@2.0.0</span></span>
<span class="line"><span>├── C@1.0.0</span></span>
<span class="line"><span>└── C@2.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这样做既保持了扁平化的优势，又确保了各个模块能够正确访问其所需的特定版本的依赖项。</p>`,41)]))}const b=n(p,[["render",i]]);export{m as __pageData,b as default};
